project_snapshot:
  metadata:
    project_name: MES Parafina
    version: '1.1'
    timestamp_utc: '2025-09-13T13:59:22.752161+00:00'
  user_profile:
    role: Właściciel projektu / Główny deweloper
    technical_level: Zaawansowany (Python, Flask, SQLAlchemy, Docker)
    communication_style: Bezpośredni, techniczny, partnerski w podejmowaniu decyzji.
    main_goal: Zbudować nowoczesny, niezawodny i użyteczny system MES.
  ai_profile:
    role: Starszy Inżynier Oprogramowania / Architekt Systemu
    tasks:
    - Projektowanie architektury
    - Pisanie i refaktoryzacja kodu
    - Tworzenie testów (TDD)
    - Sugerowanie najlepszych praktyk
    - Aktualizacja dokumentacji
    style: Proaktywny, partnerski, dzielenie pracy na małe kroki, wyjaśnianie decyzji.
  source_files_base64:
  - path: DOKUMENTACJA.md
    content: 
  - path: alembic//env.py
    content: IyBhbGVtYmljL2Vudi5weQ0KDQojIC0tLSBLUk9LIDE6IEtvbmZpZ3VyYWNqYSDFm2NpZcW8ZWsgaSBwb2RzdGF3b3dlIGltcG9ydHkgLS0tDQppbXBvcnQgc3lzDQpmcm9tIG9zLnBhdGggaW1wb3J0IGFic3BhdGgsIGRpcm5hbWUsIHJlYWxwYXRoLCBqb2luDQojIERvZGFqZW15IGfFgsOzd255IGZvbGRlciBwcm9qZWt0dSBkbyDFm2NpZcW8a2kgUHl0aG9uYS4gUm9iaW15IHRvIHR5bGtvIHJhei4NCnN5cy5wYXRoLmluc2VydCgwLCBkaXJuYW1lKGRpcm5hbWUoYWJzcGF0aChfX2ZpbGVfXykpKSkNCg0KZnJvbSBsb2dnaW5nLmNvbmZpZyBpbXBvcnQgZmlsZUNvbmZpZw0KZnJvbSBzcWxhbGNoZW15IGltcG9ydCBlbmdpbmVfZnJvbV9jb25maWcsIHBvb2wNCmZyb20gYWxlbWJpYyBpbXBvcnQgY29udGV4dA0KaW1wb3J0IG9zDQoNCiMgLS0tIEtST0sgMjogSW1wb3J0IG1ldGFkYW55Y2ggeiBvYnUgxbpyw7NkZcWCIC0tLQ0KIyBJbXBvcnR1amVteSBvYmlla3QgYGRiYCB6IFR3b2plaiBhcGxpa2FjamksIGFieSB1enlza2HEhyBkb3N0xJlwIGRvIFR3b2ljaCBtb2RlbGkNCmZyb20gYXBwLmV4dGVuc2lvbnMgaW1wb3J0IGRiICAjIFpha8WCYWRhbSwgxbxlIGRiIGplc3QgdyBleHRlbnNpb25zLnB5LCBqZcWbbGkgbmllLCB6bWllxYQgxZtjaWXFvGvEmQ0KIyBJbXBvcnR1amVteSBgTW9kZWxCYXNlYCB6IGJpYmxpb3Rla2kgc2NoZWR1bGVyYSwgemdvZG5pZSB6IHR5bSwgY28gb2RrcnlsacWbbXkNCmZyb20gY2VsZXJ5X3NxbGFsY2hlbXlfc2NoZWR1bGVyLnNlc3Npb24gaW1wb3J0IE1vZGVsQmFzZSBhcyBTY2hlZHVsZXJNb2RlbEJhc2UNCg0KIyAtLS0gS1JPSyAzOiBLb25maWd1cmFjamEgQWxlbWJpYyBpIGxvZ2lraSBVUkkgLS0tDQpjb25maWcgPSBjb250ZXh0LmNvbmZpZw0KDQppZiBjb25maWcuY29uZmlnX2ZpbGVfbmFtZSBpcyBub3QgTm9uZToNCiAgICBmaWxlQ29uZmlnKGNvbmZpZy5jb25maWdfZmlsZV9uYW1lKQ0KDQojIExvZ2lrYSB3eWJvcnUgVVJJIC0gamVzdCBkb2JyYSwgem9zdGF3aWFteSBqxIUNCkRCX1VTRVIgPSBvcy5lbnZpcm9uLmdldCgnTVlTUUxVU0VSJywgJ3Jvb3QnKQ0KREJfUEFTU1dPUkQgPSBvcy5lbnZpcm9uLmdldCgnTVlTUUxfUk9PVF9QQVNTV09SRCcsICcnKQ0KREJfSE9TVCA9IG9zLmVudmlyb24uZ2V0KCdNWVNRTEhPU1QnLCAnbG9jYWxob3N0JykNCg0KaWYgb3MuZW52aXJvbi5nZXQoJ0FMRU1CSUNfVEVTVF9NT0RFJykgPT0gJ3RydWUnOg0KICAgIGRhdGFiYXNlX3VyaSA9IGYibXlzcWwrbXlzcWxjb25uZWN0b3I6Ly97REJfVVNFUn06e0RCX1BBU1NXT1JEfUB7REJfSE9TVH0vbWVzX3BhcmFmaW5hX2RiX3Rlc3QiDQplbHNlOg0KICAgIGRhdGFiYXNlX3VyaSA9IGYibXlzcWwrbXlzcWxjb25uZWN0b3I6Ly97REJfVVNFUn06e0RCX1BBU1NXT1JEfUB7REJfSE9TVH0vbWVzX3BhcmFmaW5hX2RiIg0KDQpjb25maWcuc2V0X21haW5fb3B0aW9uKCdzcWxhbGNoZW15LnVybCcsIGRhdGFiYXNlX3VyaSkNCg0KIyAtLS0gS1JPSyA0OiBaZGVmaW5pb3dhbmllIGNlbHUgZGxhIEFsZW1iaWMgLS0tDQojIFRvIGplc3QgbmFqd2HFvG5pZWpzemEgY3rEmcWbxIcuIFR3b3J6eW15IGxpc3TEmSBvYmlla3TDs3cgTWV0YURhdGEuDQojIEFsZW1iaWMgbXVzaSB3aWVkemllxIcgbyBXU1pZU1RLSUNIIG1vZGVsYWNoLCBhYnkgZHppYcWCYcSHIHBvcHJhd25pZS4NCiMgSW1wb3J0IGBmcm9tIGFwcCBpbXBvcnQgbW9kZWxzYCB6YXBld25pYSwgxbxlIFNRTEFsY2hlbXkgIndpZHppIiBUd29qZSB0YWJlbGUuDQpmcm9tIGFwcCBpbXBvcnQgbW9kZWxzDQp0YXJnZXRfbWV0YWRhdGEgPSBbDQogICAgZGIubWV0YWRhdGEsICAgICAgICAgICAgICAgICAgICMgTWV0YWRhbmUgeiBUd29qZWogYXBsaWthY2ppDQogICAgU2NoZWR1bGVyTW9kZWxCYXNlLm1ldGFkYXRhICAgICMgTWV0YWRhbmUgeiBiaWJsaW90ZWtpIENlbGVyeQ0KXQ0KDQojIC0tLSBLUk9LIDU6IEZ1bmtjamUgdXJ1Y2hvbWllbmlvd2UgKGJleiB6bWlhbikgLS0tDQpkZWYgcnVuX21pZ3JhdGlvbnNfb2ZmbGluZSgpIC0+IE5vbmU6DQogICAgdXJsID0gY29uZmlnLmdldF9tYWluX29wdGlvbigic3FsYWxjaGVteS51cmwiKQ0KICAgIGNvbnRleHQuY29uZmlndXJlKA0KICAgICAgICB1cmw9dXJsLA0KICAgICAgICB0YXJnZXRfbWV0YWRhdGE9dGFyZ2V0X21ldGFkYXRhLA0KICAgICAgICBsaXRlcmFsX2JpbmRzPVRydWUsDQogICAgICAgIGRpYWxlY3Rfb3B0cz17InBhcmFtc3R5bGUiOiAibmFtZWQifSwNCiAgICApDQogICAgd2l0aCBjb250ZXh0LmJlZ2luX3RyYW5zYWN0aW9uKCk6DQogICAgICAgIGNvbnRleHQucnVuX21pZ3JhdGlvbnMoKQ0KDQpkZWYgcnVuX21pZ3JhdGlvbnNfb25saW5lKCkgLT4gTm9uZToNCiAgICBjb25uZWN0YWJsZSA9IGVuZ2luZV9mcm9tX2NvbmZpZygNCiAgICAgICAgY29uZmlnLmdldF9zZWN0aW9uKGNvbmZpZy5jb25maWdfaW5pX3NlY3Rpb24sIHt9KSwNCiAgICAgICAgcHJlZml4PSJzcWxhbGNoZW15LiIsDQogICAgICAgIHBvb2xjbGFzcz1wb29sLk51bGxQb29sLA0KICAgICkNCiAgICB3aXRoIGNvbm5lY3RhYmxlLmNvbm5lY3QoKSBhcyBjb25uZWN0aW9uOg0KICAgICAgICBjb250ZXh0LmNvbmZpZ3VyZSgNCiAgICAgICAgICAgIGNvbm5lY3Rpb249Y29ubmVjdGlvbiwgdGFyZ2V0X21ldGFkYXRhPXRhcmdldF9tZXRhZGF0YQ0KICAgICAgICApDQogICAgICAgIHdpdGggY29udGV4dC5iZWdpbl90cmFuc2FjdGlvbigpOg0KICAgICAgICAgICAgY29udGV4dC5ydW5fbWlncmF0aW9ucygpDQoNCmlmIGNvbnRleHQuaXNfb2ZmbGluZV9tb2RlKCk6DQogICAgcnVuX21pZ3JhdGlvbnNfb2ZmbGluZSgpDQplbHNlOg0KICAgIHJ1bl9taWdyYXRpb25zX29ubGluZSgp
  - path: app//__init__.py
    content: 
  - path: app//apollo_service.py
    content: 
  - path: app//batch_management_service.py
    content: 
  - path: app//batch_routes.py
    content: 
  - path: app//config.py
    content: IyBhcHAvY29uZmlnLnB5DQoNCmltcG9ydCBvcw0KZnJvbSBkb3RlbnYgaW1wb3J0IGxvYWRfZG90ZW52DQoNCmxvYWRfZG90ZW52KCkNCg0KY2xhc3MgQ29uZmlnOg0KICAgICIiIktvbmZpZ3VyYWNqYSBwcm9kdWtjeWpuYSAvIGRld2Vsb3BlcnNrYSIiIg0KICAgIFNFQ1JFVF9LRVkgPSBvcy5lbnZpcm9uLmdldCgnU0VDUkVUX0tFWScpIG9yICd0cnVkbmUtZG8temdhZG5pZWNpYS1oYXNsbycNCiAgICBERUJVRyA9IG9zLmVudmlyb24uZ2V0KCdGTEFTS19ERUJVRycsICdUcnVlJykubG93ZXIoKSBpbiAoJ3RydWUnLCAnMScsICd0JykNCg0KICAgICMgRGFuZSBkbyBwb8WCxIVjemVuaWEgeiBiYXrEhSBkYW55Y2ggTXlTUUwNCiAgICBNWVNRTF9IT1NUID0gb3MuZW52aXJvbi5nZXQoJ01ZU1FMSE9TVCcsICdsb2NhbGhvc3QnKQ0KICAgIE1ZU1FMX1VTRVIgPSBvcy5lbnZpcm9uLmdldCgnTVlTUUxVU0VSJywgJ3Jvb3QnKQ0KICAgIE1ZU1FMX1BBU1NXT1JEID0gb3MuZW52aXJvbi5nZXQoJ01ZU1FMX1JPT1RfUEFTU1dPUkQnLCAnJykNCiAgICBNWVNRTF9EQiA9ICdtZXNfcGFyYWZpbmFfZGInDQogICAgRU5WSVJPTk1FTlQgPSBvcy5lbnZpcm9uLmdldCgnRU5WSVJPTk1FTlQnLCAnZGV2ZWxvcG1lbnQnKQ0KICAgIFBSRUZFUlJFRF9VUkxfU0NIRU1FID0gJ2h0dHBzJyBpZiBFTlZJUk9OTUVOVCA9PSAncHJvZHVjdGlvbicgZWxzZSAnaHR0cCcNCiAgICBwcmludChmIkVOVklST05NRU5UOiB7RU5WSVJPTk1FTlR9IikNCiAgICBwcmludChmIlBSRUZFUlJFRF9VUkxfU0NIRU1FOiB7UFJFRkVSUkVEX1VSTF9TQ0hFTUV9IikNCiAgICAjIFVSSSBkbGEgYmF6eSBkZXdlbG9wZXJza2llai9wcm9kdWtjeWpuZWoNCiAgICBTUUxBTENIRU1ZX0RBVEFCQVNFX1VSSSA9ICgNCiAgICAgICAgZiJteXNxbCtteXNxbGNvbm5lY3RvcjovL3tNWVNRTF9VU0VSfTp7TVlTUUxfUEFTU1dPUkR9QCINCiAgICAgICAgZiJ7TVlTUUxfSE9TVH0ve01ZU1FMX0RCfSINCiAgICAgICAgIj9jaGFyc2V0PXV0ZjhtYjQiDQogICAgKQ0KICAgIHByaW50KGYiLS0tIFtDT05GSUcgREVCVUddIFpidWRvd2FubyBTUUxBTENIRU1ZX0RBVEFCQVNFX1VSSToge1NRTEFMQ0hFTVlfREFUQUJBU0VfVVJJfSIpDQogICAgU1FMQUxDSEVNWV9UUkFDS19NT0RJRklDQVRJT05TID0gRmFsc2UNCiAgICBURVNUSU5HID0gRmFsc2UNCiAgICBDRUxFUllfQkVBVF9EQlVSSSA9IFNRTEFMQ0hFTVlfREFUQUJBU0VfVVJJDQogICAgcHJpbnQoZiItLS0gW0NPTkZJRyBERUJVR10gVXN0YXdpb25vIENFTEVSWV9CRUFUX0RCVVJJIG5hOiB7Q0VMRVJZX0JFQVRfREJVUkl9IikNCg0KDQpjbGFzcyBQcm9kQ29uZmlnKENvbmZpZyk6DQogICAgIiIiS29uZmlndXJhY2phIHByb2R1a2N5am5hIiIiDQogICAgREVCVUcgPSBGYWxzZQ0KICAgIFRFU1RJTkcgPSBGYWxzZQ0KICAgIEVOVklST05NRU5UID0gJ3Byb2R1Y3Rpb24nDQoNCmNsYXNzIFRlc3RDb25maWcoQ29uZmlnKToNCiAgICBURVNUSU5HID0gVHJ1ZQ0KICAgICMgTmFkcGlzdWplbXkgd3N6eXN0a28sIGJleiBwb2xlZ2FuaWEgbmEgZHppZWR6aWN6ZW5pdQ0KICAgIE1ZU1FMX0hPU1QgPSBvcy5lbnZpcm9uLmdldCgnTVlTUUxIT1NUJywgJ2xvY2FsaG9zdCcpDQogICAgTVlTUUxfVVNFUiA9IG9zLmVudmlyb24uZ2V0KCdNWVNRTFVTRVInLCAncm9vdCcpDQogICAgTVlTUUxfUEFTU1dPUkQgPSBvcy5lbnZpcm9uLmdldCgnTVlTUUxfUk9PVF9QQVNTV09SRCcsICcnKQ0KICAgIE1ZU1FMX0RCID0gJ21lc19wYXJhZmluYV9kYl90ZXN0JyAjIEplZHluYSBwcmF3ZHppd2Egem1pYW5hDQoNCiAgICBTUUxBTENIRU1ZX0RBVEFCQVNFX1VSSSA9ICgNCiAgICAgICAgZiJteXNxbCtteXNxbGNvbm5lY3RvcjovL3tNWVNRTF9VU0VSfTp7TVlTUUxfUEFTU1dPUkR9QCINCiAgICAgICAgZiJ7TVlTUUxfSE9TVH0ve01ZU1FMX0RCfSINCiAgICAgICAgIj9jaGFyc2V0PXV0ZjhtYjQiDQogICAgKQ0KDQpjbGFzcyBEZXZDb25maWdGb3JUZXN0aW5nKENvbmZpZyk6DQogICAgIiIiDQogICAgU3BlY2phbG5hIGtvbmZpZ3VyYWNqYSBkbyB0ZXN0w7N3LCBrdMOzcmUgbXVzesSFIGJ5xIcgdXJ1Y2hvbWlvbmUNCiAgICBuYSBkZXdlbG9wZXJza2llaiBiYXppZSBkYW55Y2ggKHogcGXFgm55bWkgZGFueW1pKS4NCiAgICAiIiINCiAgICBURVNUSU5HID0gVHJ1ZQ==
  - path: app//dashboard_service.py
    content: IyBhcHAvZGFzaGJvYXJkX3NlcnZpY2UucHkNCg0KZnJvbSAuZXh0ZW5zaW9ucyBpbXBvcnQgZGINCmZyb20gLm1vZGVscyBpbXBvcnQgU3ByemV0LCBBbGFybXksIFRhbmtNaXhlcw0KZnJvbSAuYmF0Y2hfbWFuYWdlbWVudF9zZXJ2aWNlIGltcG9ydCBCYXRjaE1hbmFnZW1lbnRTZXJ2aWNlDQpmcm9tIHNxbGFsY2hlbXkgaW1wb3J0IGZ1bmMNCmZyb20gc3FsYWxjaGVteS5vcm0gaW1wb3J0IGpvaW5lZGxvYWQNCmZyb20gZGVjaW1hbCBpbXBvcnQgRGVjaW1hbA0KZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgZGVmYXVsdGRpY3QNCg0KY2xhc3MgRGFzaGJvYXJkU2VydmljZToNCg0KICAgIEBzdGF0aWNtZXRob2QNCiAgICBkZWYgZ2V0X21haW5fZGFzaGJvYXJkX2RhdGEoKToNCiAgICAgICAgIiIiDQogICAgICAgIEFncmVndWplIHdzenlzdGtpZSBkYW5lIGRsYSBkYXNoYm9hcmR1LiAoV2Vyc2phIDM6IFBvcHJhd25hIGtvbndlcnNqYSBuYSBmbG9hdCkNCiAgICAgICAgIiIiDQogICAgICAgIA0KICAgICAgICBzcHJ6ZXRfcSA9IGRiLnNlbGVjdChTcHJ6ZXQpLm9wdGlvbnMoDQogICAgICAgICAgICBqb2luZWRsb2FkKFNwcnpldC5hY3RpdmVfbWl4KQ0KICAgICAgICApLndoZXJlKA0KICAgICAgICAgICAgU3ByemV0LnR5cF9zcHJ6ZXR1LmluXyhbJ3JlYWt0b3InLCAnYmVjemthX2JydWRuYScsICdiZWN6a2FfY3p5c3RhJ10pDQogICAgICAgICkub3JkZXJfYnkoU3ByemV0LnR5cF9zcHJ6ZXR1LCBTcHJ6ZXQubmF6d2FfdW5pa2FsbmEpDQogICAgICAgIA0KICAgICAgICB3c3p5c3RraWVfdXJ6YWR6ZW5pYSA9IGRiLnNlc3Npb24uZXhlY3V0ZShzcHJ6ZXRfcSkuc2NhbGFycygpLnVuaXF1ZSgpLmFsbCgpDQoNCiAgICAgICAgcmVha3Rvcnlfd19wcm9jZXNpZV9kYXRhID0gW10NCiAgICAgICAgcmVha3RvcnlfcHVzdGVfZGF0YSA9IFtdDQogICAgICAgIGJlY3praV9icnVkbmVfZGF0YSA9IFtdDQogICAgICAgIGJlY3praV9jenlzdGVfZGF0YSA9IFtdDQoNCiAgICAgICAgZm9yIHNwcnpldCBpbiB3c3p5c3RraWVfdXJ6YWR6ZW5pYToNCiAgICAgICAgICAgIHNwcnpldF9kYXRhID0gew0KICAgICAgICAgICAgICAgICJpZCI6IHNwcnpldC5pZCwNCiAgICAgICAgICAgICAgICAibmF6d2EiOiBzcHJ6ZXQubmF6d2FfdW5pa2FsbmEsDQogICAgICAgICAgICAgICAgInN0YW5fc3ByemV0dSI6IHNwcnpldC5zdGFuX3NwcnpldHUsDQogICAgICAgICAgICAgICAgInBhcnRpYSI6IE5vbmUNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIHNwcnpldC50eXBfc3ByemV0dSA9PSAncmVha3Rvcic6DQogICAgICAgICAgICAgICAgc3ByemV0X2RhdGEudXBkYXRlKHsNCiAgICAgICAgICAgICAgICAgICAgInRlbXBlcmF0dXJhX2FrdHVhbG5hIjogZmxvYXQoc3ByemV0LnRlbXBlcmF0dXJhX2FrdHVhbG5hKSBpZiBzcHJ6ZXQudGVtcGVyYXR1cmFfYWt0dWFsbmEgZWxzZSBOb25lLA0KICAgICAgICAgICAgICAgICAgICAidGVtcGVyYXR1cmFfZG9jZWxvd2EiOiBmbG9hdChzcHJ6ZXQudGVtcGVyYXR1cmFfZG9jZWxvd2EpIGlmIHNwcnpldC50ZW1wZXJhdHVyYV9kb2NlbG93YSBlbHNlIE5vbmUsDQogICAgICAgICAgICAgICAgICAgICJjaXNuaWVuaWVfYWt0dWFsbmUiOiBmbG9hdChzcHJ6ZXQuY2lzbmllbmllX2FrdHVhbG5lKSBpZiBzcHJ6ZXQuY2lzbmllbmllX2FrdHVhbG5lIGVsc2UgTm9uZSwNCiAgICAgICAgICAgICAgICAgICAgInN0YW5fcGFsbmlrYSI6IHNwcnpldC5zdGFuX3BhbG5pa2EsDQogICAgICAgICAgICAgICAgICAgICJ0ZW1wZXJhdHVyYV9tYXgiOiBmbG9hdChzcHJ6ZXQudGVtcGVyYXR1cmFfbWF4IG9yICcxMjAuMCcpLA0KICAgICAgICAgICAgICAgICAgICAiY2lzbmllbmllX21heCI6IGZsb2F0KHNwcnpldC5jaXNuaWVuaWVfbWF4IG9yICc2LjAnKQ0KICAgICAgICAgICAgICAgIH0pDQoNCiAgICAgICAgICAgIGlmIHNwcnpldC5hY3RpdmVfbWl4Og0KICAgICAgICAgICAgICAgIG1peCA9IHNwcnpldC5hY3RpdmVfbWl4DQogICAgICAgICAgICAgICAgIyBnZXRfbWl4X2NvbXBvc2l0aW9uIHp3cmFjYSBuYW0gdGVyYXogc3DDs2puZSBvYmlla3R5IERlY2ltYWwNCiAgICAgICAgICAgICAgICBjb21wb3NpdGlvbiA9IEJhdGNoTWFuYWdlbWVudFNlcnZpY2UuZ2V0X21peF9jb21wb3NpdGlvbihtaXguaWQpDQogICAgICAgICAgICAgICAgd2FnYV9rZyA9IGNvbXBvc2l0aW9uLmdldCgndG90YWxfd2VpZ2h0JywgRGVjaW1hbCgnMC4wJykpDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgIyBLb253ZXJ0dWplbXkgc2vFgmFkIG5hIGZsb2F0eSBUVVRBSiwgdHXFvCBwcnplZCB3eXPFgmFuaWVtDQogICAgICAgICAgICAgICAgc2tsYWRfZGxhX2FwaSA9IFsNCiAgICAgICAgICAgICAgICAgICAgeydtYXRlcmlhbF90eXBlJzogaXRlbVsnbWF0ZXJpYWxfdHlwZSddLCAndG90YWxfcXVhbnRpdHknOiBmbG9hdChpdGVtWyd0b3RhbF9xdWFudGl0eSddKX0NCiAgICAgICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gY29tcG9zaXRpb24uZ2V0KCdzdW1tYXJ5X2J5X21hdGVyaWFsJywgW10pDQogICAgICAgICAgICAgICAgXQ0KDQogICAgICAgICAgICAgICAgc3ByemV0X2RhdGFbInBhcnRpYSJdID0gew0KICAgICAgICAgICAgICAgICAgICAiaWQiOiBtaXguaWQsDQogICAgICAgICAgICAgICAgICAgICJrb2QiOiBtaXgudW5pcXVlX2NvZGUsDQogICAgICAgICAgICAgICAgICAgICJ3YWdhX2tnIjogZmxvYXQod2FnYV9rZyksDQogICAgICAgICAgICAgICAgICAgICJza2xhZCI6IHNrbGFkX2RsYV9hcGksDQogICAgICAgICAgICAgICAgICAgICJwcm9jZXNzX3N0YXR1cyI6IG1peC5wcm9jZXNzX3N0YXR1cw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgc3ByemV0LnR5cF9zcHJ6ZXR1ID09ICdyZWFrdG9yJzoNCiAgICAgICAgICAgICAgICBpZiBzcHJ6ZXQuYWN0aXZlX21peDoNCiAgICAgICAgICAgICAgICAgICAgcmVha3Rvcnlfd19wcm9jZXNpZV9kYXRhLmFwcGVuZChzcHJ6ZXRfZGF0YSkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICByZWFrdG9yeV9wdXN0ZV9kYXRhLmFwcGVuZChzcHJ6ZXRfZGF0YSkNCiAgICAgICAgICAgIGVsaWYgc3ByemV0LnR5cF9zcHJ6ZXR1ID09ICdiZWN6a2FfYnJ1ZG5hJzoNCiAgICAgICAgICAgICAgICBiZWN6a2lfYnJ1ZG5lX2RhdGEuYXBwZW5kKHNwcnpldF9kYXRhKQ0KICAgICAgICAgICAgZWxpZiBzcHJ6ZXQudHlwX3NwcnpldHUgPT0gJ2JlY3prYV9jenlzdGEnOg0KICAgICAgICAgICAgICAgIGJlY3praV9jenlzdGVfZGF0YS5hcHBlbmQoc3ByemV0X2RhdGEpDQoNCiAgICAgICAgc3RvY2tfc3VtbWFyeSA9IGRlZmF1bHRkaWN0KGxhbWJkYTogeydicnVkbnknOiBEZWNpbWFsKCcwLjAnKSwgJ2N6eXN0eSc6IERlY2ltYWwoJzAuMCcpfSkNCg0KICAgICAgICBmb3IgYmVjemthIGluIGJlY3praV9icnVkbmVfZGF0YToNCiAgICAgICAgICAgIGlmIGJlY3prYS5nZXQoJ3BhcnRpYScpIGFuZCBiZWN6a2FbJ3BhcnRpYSddLmdldCgnc2tsYWQnKToNCiAgICAgICAgICAgICAgICBmb3IgbWF0ZXJpYWxfaW5mbyBpbiBiZWN6a2FbJ3BhcnRpYSddWydza2xhZCddOg0KICAgICAgICAgICAgICAgICAgICBtYXRfdHlwZSA9IG1hdGVyaWFsX2luZm9bJ21hdGVyaWFsX3R5cGUnXQ0KICAgICAgICAgICAgICAgICAgICBtYXRfcXVhbnRpdHkgPSBEZWNpbWFsKG1hdGVyaWFsX2luZm8uZ2V0KCd0b3RhbF9xdWFudGl0eScsICcwLjAnKSkNCiAgICAgICAgICAgICAgICAgICAgc3RvY2tfc3VtbWFyeVttYXRfdHlwZV1bJ2JydWRueSddICs9IG1hdF9xdWFudGl0eQ0KDQogICAgICAgIGZvciBiZWN6a2EgaW4gYmVjemtpX2N6eXN0ZV9kYXRhOg0KICAgICAgICAgICAgaWYgYmVjemthLmdldCgncGFydGlhJykgYW5kIGJlY3prYVsncGFydGlhJ10uZ2V0KCdza2xhZCcpOg0KICAgICAgICAgICAgICAgIGZvciBtYXRlcmlhbF9pbmZvIGluIGJlY3prYVsncGFydGlhJ11bJ3NrbGFkJ106DQogICAgICAgICAgICAgICAgICAgIG1hdF90eXBlID0gbWF0ZXJpYWxfaW5mb1snbWF0ZXJpYWxfdHlwZSddDQogICAgICAgICAgICAgICAgICAgIG1hdF9xdWFudGl0eSA9IERlY2ltYWwobWF0ZXJpYWxfaW5mby5nZXQoJ3RvdGFsX3F1YW50aXR5JywgJzAuMCcpKQ0KICAgICAgICAgICAgICAgICAgICBzdG9ja19zdW1tYXJ5W21hdF90eXBlXVsnY3p5c3R5J10gKz0gbWF0X3F1YW50aXR5DQogICAgICAgIA0KICAgICAgICBzdG9ja19zdW1tYXJ5X2xpc3QgPSBzb3J0ZWQoWw0KICAgICAgICAgICAgeydtYXRlcmlhbF90eXBlJzogaywgJ2RpcnR5X3N0b2NrX2tnJzogZmxvYXQodlsnYnJ1ZG55J10pLCAnY2xlYW5fc3RvY2tfa2cnOiBmbG9hdCh2WydjenlzdHknXSl9DQogICAgICAgICAgICBmb3IgaywgdiBpbiBzdG9ja19zdW1tYXJ5Lml0ZW1zKCkNCiAgICAgICAgXSwga2V5PWxhbWJkYSB4OiB4WydtYXRlcmlhbF90eXBlJ10pDQogICAgICAgIA0KICAgICAgICBhbGFybXlfcSA9IGRiLnNlbGVjdChBbGFybXkpLndoZXJlKEFsYXJteS5zdGF0dXNfYWxhcm11ID09ICdBS1RZV05ZJykub3JkZXJfYnkoQWxhcm15LmN6YXNfd3lzdGFwaWVuaWEuZGVzYygpKS5saW1pdCg1KQ0KICAgICAgICBhbGFybXkgPSBkYi5zZXNzaW9uLmV4ZWN1dGUoYWxhcm15X3EpLnNjYWxhcnMoKS5hbGwoKQ0KICAgICAgICBhbGFybXlfZGF0YSA9IFt7ICJpZCI6IGEuaWQsICJ0eXAiOiBhLnR5cF9hbGFybXUsICJzcHJ6ZXQiOiBhLm5hendhX3NwcnpldHUsICJ3YXJ0b3NjIjogZmxvYXQoYS53YXJ0b3NjKSwgImxpbWl0IjogZmxvYXQoYS5saW1pdF9wcnpla3JvY3plbmlhKSwgImN6YXMiOiBhLmN6YXNfd3lzdGFwaWVuaWEuaXNvZm9ybWF0KCkgKyAnWicgfSBmb3IgYSBpbiBhbGFybXldDQoNCiAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICJyZWFrdG9yeV93X3Byb2Nlc2llIjogcmVha3Rvcnlfd19wcm9jZXNpZV9kYXRhLA0KICAgICAgICAgICAgInJlYWt0b3J5X3B1c3RlIjogcmVha3RvcnlfcHVzdGVfZGF0YSwNCiAgICAgICAgICAgICJiZWN6a2lfYnJ1ZG5lIjogYmVjemtpX2JydWRuZV9kYXRhLA0KICAgICAgICAgICAgImJlY3praV9jenlzdGUiOiBiZWN6a2lfY3p5c3RlX2RhdGEsDQogICAgICAgICAgICAiYWxhcm15IjogYWxhcm15X2RhdGEsDQogICAgICAgICAgICAic3RvY2tfc3VtbWFyeSI6IHN0b2NrX3N1bW1hcnlfbGlzdA0KICAgICAgICB9
  - path: app//db.py
    content: IyBhcHAvZGIucHkNCg0KaW1wb3J0IG15c3FsLmNvbm5lY3Rvcg0KZnJvbSBmbGFzayBpbXBvcnQgY3VycmVudF9hcHANCg0KZGVmIGdldF9kYl9jb25uZWN0aW9uKGNvbmZpZz1Ob25lKToNCiAgICAiIiJUd29yenkgaSB6d3JhY2Egbm93ZSBwb8WCxIVjemVuaWUgeiBiYXrEhSBkYW55Y2ggbmEgcG9kc3Rhd2llIHBvZGFuZWoga29uZmlndXJhY2ppIGx1YiB6IGN1cnJlbnRfYXBwLiIiIg0KICAgIGlmIGNvbmZpZyBpcyBOb25lOg0KICAgICAgICBjb25maWcgPSBjdXJyZW50X2FwcC5jb25maWcNCiAgICBjb25uZWN0aW9uID0gbXlzcWwuY29ubmVjdG9yLmNvbm5lY3QoDQogICAgICAgIGhvc3Q9Y29uZmlnWydNWVNRTF9IT1NUJ10sDQogICAgICAgIHVzZXI9Y29uZmlnWydNWVNRTF9VU0VSJ10sDQogICAgICAgIHBhc3N3b3JkPWNvbmZpZ1snTVlTUUxfUEFTU1dPUkQnXSwNCiAgICAgICAgZGF0YWJhc2U9Y29uZmlnWydNWVNRTF9EQiddLA0KICAgICAgICBhdXRvY29tbWl0PUZhbHNlDQogICAgKQ0KICAgIGN1cnNvciA9IGNvbm5lY3Rpb24uY3Vyc29yKCkNCiAgICBjdXJzb3IuZXhlY3V0ZSgiU0VUIHRpbWVfem9uZSA9ICcrMDA6MDAnIikNCiAgICBjdXJzb3IuY2xvc2UoKQ0KICAgIHJldHVybiBjb25uZWN0aW9u
  - path: app//extensions.py
    content: IyBhcHAvZXh0ZW5zaW9ucy5weQ0KDQppbXBvcnQgb3MNCmZyb20gZmxhc2tfc3FsYWxjaGVteSBpbXBvcnQgU1FMQWxjaGVteQ0KZnJvbSBmbGFza19zb2NrZXRpbyBpbXBvcnQgU29ja2V0SU8NCmZyb20gc3FsYWxjaGVteSBpbXBvcnQgZXZlbnQNCmZyb20gc3FsYWxjaGVteS5lbmdpbmUgaW1wb3J0IEVuZ2luZQ0KDQoNCmRiID0gU1FMQWxjaGVteSgpDQoNCkBldmVudC5saXN0ZW5zX2ZvcihFbmdpbmUsICJjb25uZWN0IikNCmRlZiBzZXRfdXRjX3RpbWV6b25lKGRiYXBpX2Nvbm5lY3Rpb24sIGNvbm5lY3Rpb25fcmVjb3JkKToNCiAgICAiIiINCiAgICBXeWtvbnVqZSBTRVQgdGltZV96b25lID0gJyswMDowMCcgZGxhIGthxbxkZWdvIG5vd2VnbyBwb8WCxIVjemVuaWEuDQogICAgWmFwZXduaWEgdG8sIMW8ZSBzZXNqYSBNeVNRTCB6YXdzemUgZHppYcWCYSB3IFVUQy4NCiAgICAiIiINCiAgICBjdXJzb3IgPSBkYmFwaV9jb25uZWN0aW9uLmN1cnNvcigpDQogICAgY3Vyc29yLmV4ZWN1dGUoIlNFVCB0aW1lX3pvbmUgPSAnKzAwOjAwJyIpDQogICAgY3Vyc29yLmNsb3NlKCkNCg0KcmVkaXNfdXJsID0gb3MuZW52aXJvbi5nZXQoJ1JFRElTX1VSTCcpDQoNCnNvY2tldGlvID0gU29ja2V0SU8oDQogICAgYXN5bmNfbW9kZT0nZXZlbnRsZXQnLA0KICAgIGNvcnNfYWxsb3dlZF9vcmlnaW5zPSIqIiwNCiAgICAjbG9nZ2VyPVRydWUsDQogICAgI2VuZ2luZWlvX2xvZ2dlcj1UcnVlLA0KICAgIG1lc3NhZ2VfcXVldWU9cmVkaXNfdXJsLA0KICAgIHBpbmdfdGltZW91dD0yMCwNCiAgICBwaW5nX2ludGVydmFsPTEwDQoNCik=
  - path: app//models.py
    content: 
  - path: app//monitoring.py
    content: IyBhcHAvbW9uaXRvcmluZy5weQ0KDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZSwgdGltZXpvbmUNCmZyb20gLmV4dGVuc2lvbnMgaW1wb3J0IGRiDQpmcm9tIC5tb2RlbHMgaW1wb3J0IFNwcnpldCwgQWxhcm15DQoNCmNsYXNzIE1vbml0b3JpbmdTZXJ2aWNlOg0KICAgIA0KICAgIGRlZiBpbml0X2FwcChzZWxmLCBhcHApOg0KICAgICAgICBzZWxmLmFwcCA9IGFwcA0KDQogICAgZGVmIGNoZWNrX2VxdWlwbWVudF9zdGF0dXMoc2VsZik6DQogICAgICAgICIiIg0KICAgICAgICBTcHJhd2R6YSBzdGFuIHdzenlzdGtpY2ggdXJ6xIVkemXFhCAod2Vyc2phIE9STSkuIFR3b3J6eSBpIHphbXlrYSBhbGFybXkuDQogICAgICAgICIiIg0KICAgICAgICB0cnk6DQogICAgICAgICAgICAjIDEuIFBvYmllcnogc3RhbiB3c3p5c3RraWNoIHVyesSFZHplxYQNCiAgICAgICAgICAgIGFsbF9lcXVpcG1lbnQgPSBkYi5zZXNzaW9uLmV4ZWN1dGUoZGIuc2VsZWN0KFNwcnpldCkpLnNjYWxhcnMoKS5hbGwoKQ0KDQogICAgICAgICAgICAjIDIuIFBvYmllcnogd3N6eXN0a2llIEFLVFlXTkUgYWxhcm15DQogICAgICAgICAgICBhY3RpdmVfYWxhcm1zX3EgPSBkYi5zZWxlY3QoQWxhcm15KS53aGVyZShBbGFybXkuc3RhdHVzX2FsYXJtdSA9PSAnQUtUWVdOWScpDQogICAgICAgICAgICBhY3RpdmVfYWxhcm1zX3JhdyA9IGRiLnNlc3Npb24uZXhlY3V0ZShhY3RpdmVfYWxhcm1zX3EpLnNjYWxhcnMoKS5hbGwoKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAjIFN0d8Ozcnogc8WCb3duaWsgZGxhIHN6eWJraWNoIHNwcmF3ZHplxYQ6IChuYXp3YV9zcHJ6xJl0dSwgdHlwX2FsYXJtdSkgLT4gb2JpZWt0IEFsYXJtDQogICAgICAgICAgICBhY3RpdmVfYWxhcm1zID0geyhhLm5hendhX3NwcnpldHUsIGEudHlwX2FsYXJtdSk6IGEgZm9yIGEgaW4gYWN0aXZlX2FsYXJtc19yYXd9DQoNCiAgICAgICAgICAgICMgMy4gUHJ6ZWpkxbogcHJ6ZXoga2HFvGRlIHVyesSFZHplbmllIGkgendlcnlmaWt1aiBqZWdvIHN0YW4NCiAgICAgICAgICAgIGZvciBpdGVtIGluIGFsbF9lcXVpcG1lbnQ6DQogICAgICAgICAgICAgICAgbmF6d2Ffc3ByemV0dSA9IGl0ZW0ubmF6d2FfdW5pa2FsbmENCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIC0tLSBTcHJhd2R6YW5pZSB0ZW1wZXJhdHVyeSAtLS0NCiAgICAgICAgICAgICAgICAjIFXFvHl3YW15IHRlcmF6IGRvc3TEmXB1IHByemV6IGF0cnlidXQgKGtyb3BrxJkpDQogICAgICAgICAgICAgICAgYWt0dWFsbmFfdGVtcCA9IGl0ZW0udGVtcGVyYXR1cmFfYWt0dWFsbmENCiAgICAgICAgICAgICAgICBtYXhfdGVtcCA9IGl0ZW0udGVtcGVyYXR1cmFfbWF4DQogICAgICAgICAgICAgICAgaXNfdGVtcF9hbGFybSA9IChuYXp3YV9zcHJ6ZXR1LCAnVEVNUEVSQVRVUkEnKSBpbiBhY3RpdmVfYWxhcm1zDQoNCiAgICAgICAgICAgICAgICBpZiBha3R1YWxuYV90ZW1wIGlzIG5vdCBOb25lIGFuZCBtYXhfdGVtcCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgaWYgYWt0dWFsbmFfdGVtcCA+IG1heF90ZW1wOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGlzX3RlbXBfYWxhcm06DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3JlYXRlX2FsYXJtKCdURU1QRVJBVFVSQScsIG5hendhX3NwcnpldHUsIGFrdHVhbG5hX3RlbXAsIG1heF90ZW1wKQ0KICAgICAgICAgICAgICAgICAgICBlbGlmIGlzX3RlbXBfYWxhcm06DQogICAgICAgICAgICAgICAgICAgICAgICBhbGFybV90b19yZXNvbHZlID0gYWN0aXZlX2FsYXJtc1sobmF6d2Ffc3ByemV0dSwgJ1RFTVBFUkFUVVJBJyldDQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZXNvbHZlX2FsYXJtKGFsYXJtX3RvX3Jlc29sdmUpDQoNCiAgICAgICAgICAgICAgICAjIC0tLSBTcHJhd2R6YW5pZSBjacWbbmllbmlhIC0tLQ0KICAgICAgICAgICAgICAgIGFrdHVhbG5lX2Npc25pZW5pZSA9IGl0ZW0uY2lzbmllbmllX2FrdHVhbG5lDQogICAgICAgICAgICAgICAgbWF4X2Npc25pZW5pZSA9IGl0ZW0uY2lzbmllbmllX21heA0KICAgICAgICAgICAgICAgIGlzX3ByZXNzdXJlX2FsYXJtID0gKG5hendhX3NwcnpldHUsICdDSVNOSUVOSUUnKSBpbiBhY3RpdmVfYWxhcm1zDQoNCiAgICAgICAgICAgICAgICBpZiBha3R1YWxuZV9jaXNuaWVuaWUgaXMgbm90IE5vbmUgYW5kIG1heF9jaXNuaWVuaWUgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIGlmIGFrdHVhbG5lX2Npc25pZW5pZSA+IG1heF9jaXNuaWVuaWU6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaXNfcHJlc3N1cmVfYWxhcm06DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3JlYXRlX2FsYXJtKCdDSVNOSUVOSUUnLCBuYXp3YV9zcHJ6ZXR1LCBha3R1YWxuZV9jaXNuaWVuaWUsIG1heF9jaXNuaWVuaWUpDQogICAgICAgICAgICAgICAgICAgIGVsaWYgaXNfcHJlc3N1cmVfYWxhcm06DQogICAgICAgICAgICAgICAgICAgICAgICBhbGFybV90b19yZXNvbHZlID0gYWN0aXZlX2FsYXJtc1sobmF6d2Ffc3ByemV0dSwgJ0NJU05JRU5JRScpXQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVzb2x2ZV9hbGFybShhbGFybV90b19yZXNvbHZlKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBkYi5zZXNzaW9uLmNvbW1pdCgpDQoNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgZGIuc2Vzc2lvbi5yb2xsYmFjaygpDQogICAgICAgICAgICBwcmludChmIkLFgcSERCBwb2RjemFzIHNwcmF3ZHphbmlhIGFsYXJtw7N3OiB7ZX0iKQ0KICAgICAgICAgICAgcmFpc2UNCg0KDQogICAgZGVmIF9jcmVhdGVfYWxhcm0oc2VsZiwgdHlwX2FsYXJtdSwgbmF6d2Ffc3ByemV0dSwgd2FydG9zYywgbGltaXQpOg0KICAgICAgICAiIiJQcnl3YXRuYSBtZXRvZGEgZG8gdHdvcnplbmlhIG5vd2VnbyBhbGFybXUgdyBiYXppZSBkYW55Y2ggKHdlcnNqYSBPUk0pLiIiIg0KICAgICAgICBub3d5X2FsYXJtID0gQWxhcm15KA0KICAgICAgICAgICAgdHlwX2FsYXJtdT10eXBfYWxhcm11LA0KICAgICAgICAgICAgbmF6d2Ffc3ByemV0dT1uYXp3YV9zcHJ6ZXR1LA0KICAgICAgICAgICAgd2FydG9zYz13YXJ0b3NjLA0KICAgICAgICAgICAgbGltaXRfcHJ6ZWtyb2N6ZW5pYT1saW1pdCwNCiAgICAgICAgICAgIGN6YXNfd3lzdGFwaWVuaWE9ZGF0ZXRpbWUubm93KHRpbWV6b25lLnV0YyksDQogICAgICAgICAgICBzdGF0dXNfYWxhcm11PSdBS1RZV05ZJw0KICAgICAgICApDQogICAgICAgIGRiLnNlc3Npb24uYWRkKG5vd3lfYWxhcm0pDQoNCiAgICBkZWYgX3Jlc29sdmVfYWxhcm0oc2VsZiwgYWxhcm1fb2JqKToNCiAgICAgICAgIiIiUHJ5d2F0bmEgbWV0b2RhIGRvIHphbXlrYW5pYSBpc3RuaWVqxIVjZWdvIGFsYXJtdSAod2Vyc2phIE9STSkuIiIiDQogICAgICAgIGFsYXJtX29iai5zdGF0dXNfYWxhcm11ID0gJ1pBS09OQ1pPTlknDQogICAgICAgIGFsYXJtX29iai5jemFzX3pha29uY3plbmlhID0gZGF0ZXRpbWUubm93KHRpbWV6b25lLnV0Yyk=
  - path: app//operations_routes.py
    content: 
  - path: app//pathfinder_service.py
    content: 
  - path: app//pathfinder_tester.py
    content: 
  - path: app//routes.py
    content: 
  - path: app//scheduler_routes.py
    content: IyBhcHAvc2NoZWR1bGVyX3JvdXRlcy5weQ0KZnJvbSBmbGFzayBpbXBvcnQgQmx1ZXByaW50LCBqc29uaWZ5LCByZXF1ZXN0DQpmcm9tIGFwcC5leHRlbnNpb25zIGltcG9ydCBkYg0KaW1wb3J0IHN5cw0KaW1wb3J0IG9zDQpzeXMucGF0aC5pbnNlcnQoMCwgb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLmRpcm5hbWUoX19maWxlX18pKSwgJ2xvY2FsX2xpYnMnKSkNCmZyb20gY2VsZXJ5X3NxbGFsY2hlbXlfc2NoZWR1bGVyIGltcG9ydCBtb2RlbHMNCmZyb20gY2VsZXJ5X3NxbGFsY2hlbXlfc2NoZWR1bGVyLm1vZGVscyBpbXBvcnQgUGVyaW9kaWNUYXNrLCBJbnRlcnZhbFNjaGVkdWxlDQoNCg0Kc2NoZWR1bGVyX2JwID0gQmx1ZXByaW50KCdzY2hlZHVsZXInLCBfX25hbWVfXywgdXJsX3ByZWZpeD0nL3NjaGVkdWxlcicpDQoNCkBzY2hlZHVsZXJfYnAucm91dGUoJy90YXNrcycsIG1ldGhvZHM9WydHRVQnXSkNCmRlZiBnZXRfYWxsX3Rhc2tzKCk6DQogICAgdGFza3MgPSBkYi5zZXNzaW9uLnF1ZXJ5KFBlcmlvZGljVGFzaykuYWxsKCkNCiAgICByZXN1bHQgPSBbXQ0KICAgIGZvciB0YXNrIGluIHRhc2tzOg0KICAgICAgICByZXN1bHQuYXBwZW5kKHsNCiAgICAgICAgICAgICdpZCc6IHRhc2suaWQsDQogICAgICAgICAgICAnbmFtZSc6IHRhc2submFtZSwNCiAgICAgICAgICAgICd0YXNrJzogdGFzay50YXNrLA0KICAgICAgICAgICAgJ2VuYWJsZWQnOiB0YXNrLmVuYWJsZWQsDQogICAgICAgICAgICAnaW50ZXJ2YWwnOiBzdHIodGFzay5pbnRlcnZhbCksDQogICAgICAgICAgICAnbGFzdF9ydW5fYXQnOiB0YXNrLmxhc3RfcnVuX2F0DQogICAgICAgIH0pDQogICAgcmV0dXJuIGpzb25pZnkocmVzdWx0KQ0KDQpAc2NoZWR1bGVyX2JwLnJvdXRlKCcvdGFza3MvPGludDp0YXNrX2lkPi90b2dnbGUnLCBtZXRob2RzPVsnUE9TVCddKQ0KZGVmIHRvZ2dsZV90YXNrKHRhc2tfaWQpOg0KICAgICIiIlfFgsSFY3phIGx1YiB3ecWCxIVjemEgemFkYW5pZS4iIiINCiAgICB0YXNrID0gZGIuc2Vzc2lvbi5xdWVyeShQZXJpb2RpY1Rhc2spLmdldCh0YXNrX2lkKQ0KICAgIGlmIG5vdCB0YXNrOg0KICAgICAgICByZXR1cm4ganNvbmlmeSh7J2Vycm9yJzogJ1Rhc2sgbm90IGZvdW5kJ30pLCA0MDQNCiAgICAgICAgDQogICAgdGFzay5lbmFibGVkID0gbm90IHRhc2suZW5hYmxlZA0KICAgIGRiLnNlc3Npb24uY29tbWl0KCkNCiAgICByZXR1cm4ganNvbmlmeSh7J21lc3NhZ2UnOiBmIlRhc2sgJ3t0YXNrLm5hbWV9JyBpcyBub3cgeydlbmFibGVkJyBpZiB0YXNrLmVuYWJsZWQgZWxzZSAnZGlzYWJsZWQnfSJ9KQ0KDQpAc2NoZWR1bGVyX2JwLnJvdXRlKCcvdGFza3MvPGludDp0YXNrX2lkPi9pbnRlcnZhbCcsIG1ldGhvZHM9WydQT1NUJ10pDQpkZWYgc2V0X3Rhc2tfaW50ZXJ2YWwodGFza19pZCk6DQogICAgIiIiWm1pZW5pYSBpbnRlcndhxYIgemFkYW5pYS4gT2N6ZWt1amUgSlNPTjogeyJldmVyeSI6IDMwLCAicGVyaW9kIjogInNlY29uZHMifSIiIg0KICAgIHRhc2sgPSBkYi5zZXNzaW9uLnF1ZXJ5KFBlcmlvZGljVGFzaykuZ2V0KHRhc2tfaWQpDQogICAgaWYgbm90IHRhc2s6DQogICAgICAgIHJldHVybiBqc29uaWZ5KHsnZXJyb3InOiAnVGFzayBub3QgZm91bmQnfSksIDQwNA0KDQogICAgZGF0YSA9IHJlcXVlc3QuZ2V0X2pzb24oKQ0KICAgIGV2ZXJ5ID0gZGF0YS5nZXQoJ2V2ZXJ5JykNCiAgICBwZXJpb2QgPSBkYXRhLmdldCgncGVyaW9kJywgJ3NlY29uZHMnKQ0KDQogICAgaWYgbm90IGV2ZXJ5Og0KICAgICAgICByZXR1cm4ganNvbmlmeSh7J2Vycm9yJzogJ01pc3NpbmcgImV2ZXJ5IiBwYXJhbWV0ZXInfSksIDQwMA0KDQogICAgIyBabmFqZMW6IGx1YiBzdHfDs3J6IG5vd3kgaW50ZXJ3YcWCDQogICAgaW50ZXJ2YWwgPSBkYi5zZXNzaW9uLnF1ZXJ5KEludGVydmFsU2NoZWR1bGUpLmZpbHRlcl9ieShldmVyeT1ldmVyeSwgcGVyaW9kPXBlcmlvZCkuZmlyc3QoKQ0KICAgIGlmIG5vdCBpbnRlcnZhbDoNCiAgICAgICAgaW50ZXJ2YWwgPSBJbnRlcnZhbFNjaGVkdWxlKGV2ZXJ5PWV2ZXJ5LCBwZXJpb2Q9cGVyaW9kKQ0KICAgICAgICBkYi5zZXNzaW9uLmFkZChpbnRlcnZhbCkNCiAgICAgICAgZGIuc2Vzc2lvbi5jb21taXQoKQ0KICAgIA0KICAgIHRhc2suaW50ZXJ2YWxfaWQgPSBpbnRlcnZhbC5pZA0KICAgIGRiLnNlc3Npb24uY29tbWl0KCkNCiAgICByZXR1cm4ganNvbmlmeSh7J21lc3NhZ2UnOiBmIlRhc2sgJ3t0YXNrLm5hbWV9JyBpbnRlcnZhbCBzZXQgdG8gZXZlcnkge2V2ZXJ5fSB7cGVyaW9kfSJ9KQ0KDQojIFBhbWnEmXRhaiwgYWJ5IHphcmVqZXN0cm93YcSHIHRlbiBibHVlcHJpbnQgdyBhcHAvX19pbml0X18ucHk6DQojIGZyb20gLnNjaGVkdWxlcl9yb3V0ZXMgaW1wb3J0IHNjaGVkdWxlcl9icA0KIyBhcHAucmVnaXN0ZXJfYmx1ZXByaW50KHNjaGVkdWxlcl9icCk=
  - path: app//sensors.py
    content: 
  - path: app//sockets.py
    content: 
  - path: app//sprzet_routes.py
    content: 
  - path: app//sprzet_service.py
    content: 
  - path: app//tasks.py
    content: IyBhcHAvdGFza3MucHkNCg0KZnJvbSBjZWxlcnlfYXBwIGltcG9ydCBjZWxlcnksIGZsYXNrX2FwcA0KZnJvbSAuc2Vuc29ycyBpbXBvcnQgU2Vuc29yU2VydmljZQ0KZnJvbSAubW9uaXRvcmluZyBpbXBvcnQgTW9uaXRvcmluZ1NlcnZpY2UNCmZyb20gLnNvY2tldHMgaW1wb3J0IGJyb2FkY2FzdF9kYXNoYm9hcmRfdXBkYXRlDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KaW1wb3J0IG9zDQpmcm9tIGZsYXNrX3NvY2tldGlvIGltcG9ydCBTb2NrZXRJTw0KZnJvbSBtZW1vcnlfcHJvZmlsZXIgaW1wb3J0IHByb2ZpbGUNCg0KIyBVc3RhbCBhZHJlcyBVUkwgYnJva2VyYSBSZWRpcw0KUkVESVNfVVJMID0gb3MuZW52aXJvbi5nZXQoJ1JFRElTX1VSTCcsICdyZWRpczovL2xvY2FsaG9zdDo2Mzc5LzAnKQ0KaWYgIlJFRElTX1VSTCIgbm90IGluIG9zLmVudmlyb246DQogICAgdHJ5Og0KICAgICAgICBpbXBvcnQgc29ja2V0DQogICAgICAgIHNvY2tldC5nZXRob3N0YnluYW1lKCdyZWRpcycpDQogICAgICAgIFJFRElTX1VSTCA9ICdyZWRpczovL3JlZGlzOjYzNzkvMCcNCiAgICBleGNlcHQgc29ja2V0LmVycm9yOg0KICAgICAgICBwYXNzDQoNCiMgVXR3w7NyeiBpbnN0YW5jasSZIFNvY2tldElPIGRlZHlrb3dhbsSFIGRsYSB3b3JrZXJhIENlbGVyeQ0KIyBVxbx5d2Egb25hIHRlZ28gc2FtZWdvIGJyb2tlcmEgUmVkaXMsIGNvIGfFgsOzd25hIGFwbGlrYWNqYQ0KY2VsZXJ5X3NvY2tldGlvID0gU29ja2V0SU8obWVzc2FnZV9xdWV1ZT1SRURJU19VUkwpDQoNCkBjZWxlcnkudGFzayhuYW1lPSdhcHAudGFza3MucmVhZF9zZW5zb3JzX3Rhc2snKQ0KZGVmIHJlYWRfc2Vuc29yc190YXNrKCk6DQogICAgIiIiDQogICAgWmFkYW5pZSBDZWxlcnkgZG8gb2Rjenl0dSBkYW55Y2ggeiBjenVqbmlrw7N3Lg0KICAgIFXFvHl3YSBtZW1vcnlfcHJvZmlsZXIgZG8gbG9nb3dhbmlhIHp1xbx5Y2lhIHBhbWnEmWNpLg0KICAgICIiIg0KICAgIHByaW50KGYiXG4tLS0gW1BJRDoge29zLmdldHBpZCgpfV0gQ0VMRVJZIFRBU0s6IFVydWNoYW1pYW0gcmVhZF9zZW5zb3JzX3Rhc2sgKHogcHJvZmlsb3dhbmllbSBwYW1pxJljaSkgbyB7ZGF0ZXRpbWUubm93KCl9IC0tLSIpDQogICAgdHJ5Og0KICAgICAgICAjIFNlcndpc3kgc8SFIGp1xbwgemFpbmljam93YW5lIHcgY2VsZXJ5X2FwcC5weSwgd2nEmWMgbW/FvGVteSBpY2ggdcW8eXdhxIcNCiAgICAgICAgc2Vuc29yX3NlcnZpY2UgPSBTZW5zb3JTZXJ2aWNlKCkNCiAgICAgICAgc2Vuc29yX3NlcnZpY2UucmVhZF9zZW5zb3JzKCkNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHByaW50KGYiQsWCxIVkIHcgemFkYW5pdSBDZWxlcnkgJ3JlYWRfc2Vuc29yc190YXNrJzoge2V9IikNCiAgICAgICAgIyBNb8W8bmEgZG9kYcSHIGJhcmR6aWVqIHphYXdhbnNvd2FuZSBsb2dvd2FuaWUgbHViIHBvbmF3aWFuaWUgemFkYW5pYQ0KICAgICAgICANCkBjZWxlcnkudGFzayhuYW1lPSdhcHAudGFza3MuY2hlY2tfYWxhcm1zX3Rhc2snKQ0KZGVmIGNoZWNrX2FsYXJtc190YXNrKCk6DQogICAgIiIiDQogICAgWmFkYW5pZSBDZWxlcnkgZG8gc3ByYXdkemFuaWEgYWxhcm3Ds3cuDQogICAgUG8gemFrb8WEY3plbml1LCBlbWl0dWplIHpkYXJ6ZW5pZSBTb2NrZXQuSU8gcHJ6ZXogUmVkaXNhLg0KICAgICIiIg0KICAgIHByaW50KGYiXG4tLS0gW1BJRDoge29zLmdldHBpZCgpfV0gQ0VMRVJZIFRBU0s6IFVydWNoYW1pYW0gY2hlY2tfYWxhcm1zX3Rhc2sgbyB7ZGF0ZXRpbWUubm93KCl9IC0tLSIpDQogICAgdHJ5Og0KICAgICAgICAjIFXFvHl3YW15IGtvbnRla3N0dSBhcGxpa2FjamkgemFpbXBvcnRvd2FuZWdvIHogY2VsZXJ5X2FwcA0KICAgICAgICB3aXRoIGZsYXNrX2FwcC5hcHBfY29udGV4dCgpOg0KICAgICAgICAgICAgbW9uaXRvcmluZ19zZXJ2aWNlID0gTW9uaXRvcmluZ1NlcnZpY2UoKQ0KICAgICAgICAgICAgbW9uaXRvcmluZ19zZXJ2aWNlLmNoZWNrX2VxdWlwbWVudF9zdGF0dXMoKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAjIFBvYmllcnogxZt3aWXFvGUgZGFuZQ0KICAgICAgICAgICAgZnJvbSAuZGFzaGJvYXJkX3NlcnZpY2UgaW1wb3J0IERhc2hib2FyZFNlcnZpY2UNCiAgICAgICAgICAgIGRhc2hib2FyZF9kYXRhID0gRGFzaGJvYXJkU2VydmljZS5nZXRfbWFpbl9kYXNoYm9hcmRfZGF0YSgpDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgV3llbWl0dWogemRhcnplbmllIGRvIHdzenlzdGtpY2gga2xpZW50w7N3IHByemV6IFJlZGlzYQ0KICAgICAgICAgICAgY2VsZXJ5X3NvY2tldGlvLmVtaXQoJ2Rhc2hib2FyZF91cGRhdGUnLCBkYXNoYm9hcmRfZGF0YSkNCiAgICAgICAgICAgIHByaW50KGYiLS0tIFtQSUQ6IHtvcy5nZXRwaWQoKX1dIENFTEVSWSBUQVNLOiBXeWVtaXRvd2FubyAnZGFzaGJvYXJkX3VwZGF0ZScgcHJ6ZXogUmVkaXMuIC0tLSIpDQoNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHByaW50KGYiQsWCxIVkIHcgemFkYW5pdSBDZWxlcnkgJ2NoZWNrX2FsYXJtc190YXNrJzoge2V9IikNCg==
  - path: app//topology_manager.py
    content: 
  - path: app//topology_routes.py
    content: 
  - path: backup_restore_point.sql
    content: LS0gTXlTUUwgZHVtcCAxMC4xMyAgRGlzdHJpYiA4LjAuNDIsIGZvciBXaW42NCAoeDg2XzY0KQ0KLS0NCi0tIEhvc3Q6IGxvY2FsaG9zdCAgICBEYXRhYmFzZTogbWVzX3BhcmFmaW5hX2RiDQotLSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi0tIFNlcnZlciB2ZXJzaW9uCTguMC40Mw0KDQovKiE0MDEwMSBTRVQgQE9MRF9DSEFSQUNURVJfU0VUX0NMSUVOVD1AQENIQVJBQ1RFUl9TRVRfQ0xJRU5UICovOw0KLyohNDAxMDEgU0VUIEBPTERfQ0hBUkFDVEVSX1NFVF9SRVNVTFRTPUBAQ0hBUkFDVEVSX1NFVF9SRVNVTFRTICovOw0KLyohNDAxMDEgU0VUIEBPTERfQ09MTEFUSU9OX0NPTk5FQ1RJT049QEBDT0xMQVRJT05fQ09OTkVDVElPTiAqLzsNCi8qITUwNTAzIFNFVCBOQU1FUyB1dGY4ICovOw0KLyohNDAxMDMgU0VUIEBPTERfVElNRV9aT05FPUBAVElNRV9aT05FICovOw0KLyohNDAxMDMgU0VUIFRJTUVfWk9ORT0nKzAwOjAwJyAqLzsNCi8qITQwMDE0IFNFVCBAT0xEX1VOSVFVRV9DSEVDS1M9QEBVTklRVUVfQ0hFQ0tTLCBVTklRVUVfQ0hFQ0tTPTAgKi87DQovKiE0MDAxNCBTRVQgQE9MRF9GT1JFSUdOX0tFWV9DSEVDS1M9QEBGT1JFSUdOX0tFWV9DSEVDS1MsIEZPUkVJR05fS0VZX0NIRUNLUz0wICovOw0KLyohNDAxMDEgU0VUIEBPTERfU1FMX01PREU9QEBTUUxfTU9ERSwgU1FMX01PREU9J05PX0FVVE9fVkFMVUVfT05fWkVSTycgKi87DQovKiE0MDExMSBTRVQgQE9MRF9TUUxfTk9URVM9QEBTUUxfTk9URVMsIFNRTF9OT1RFUz0wICovOw0KDQotLQ0KLS0gVGFibGUgc3RydWN0dXJlIGZvciB0YWJsZSBgYWxhcm15YA0KLS0NCg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYGFsYXJteWA7DQovKiE0MDEwMSBTRVQgQHNhdmVkX2NzX2NsaWVudCAgICAgPSBAQGNoYXJhY3Rlcl9zZXRfY2xpZW50ICovOw0KLyohNTA1MDMgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gdXRmOG1iNCAqLzsNCkNSRUFURSBUQUJMRSBgYWxhcm15YCAoDQogIGBpZGAgaW50IE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBgdHlwX2FsYXJtdWAgZW51bSgnVEVNUEVSQVRVUkEnLCdDSVNOSUVOSUUnLCdQT1pJT00nLCdTWVNURU0nKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwsDQogIGBuYXp3YV9zcHJ6ZXR1YCB2YXJjaGFyKDEwMCkgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIE5PVCBOVUxMLA0KICBgd2FydG9zY2AgZGVjaW1hbCgxMCwyKSBOT1QgTlVMTCwNCiAgYGxpbWl0X3ByemVrcm9jemVuaWFgIGRlY2ltYWwoMTAsMikgTk9UIE5VTEwsDQogIGBjemFzX3d5c3RhcGllbmlhYCBkYXRldGltZSBOT1QgTlVMTCwNCiAgYHN0YXR1c19hbGFybXVgIGVudW0oJ0FLVFlXTlknLCdQT1RXSUVSRFpPTlknLCdaQUtPTkNaT05ZJykgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgJ0FLVFlXTlknLA0KICBgY3phc19wb3R3aWVyZHplbmlhYCBkYXRldGltZSBERUZBVUxUIE5VTEwsDQogIGBjemFzX3pha29uY3plbmlhYCBkYXRldGltZSBERUZBVUxUIE5VTEwsDQogIGBrb21lbnRhcnpgIHRleHQgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpLA0KICBQUklNQVJZIEtFWSAoYGlkYCkNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD0xMDAwIERFRkFVTFQgQ0hBUlNFVD11dGY4bWI0IENPTExBVEU9dXRmOG1iNF91bmljb2RlX2NpOw0KLyohNDAxMDEgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gQHNhdmVkX2NzX2NsaWVudCAqLzsNCg0KLS0NCi0tIFRhYmxlIHN0cnVjdHVyZSBmb3IgdGFibGUgYGFsZW1iaWNfdmVyc2lvbmANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBhbGVtYmljX3ZlcnNpb25gOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYGFsZW1iaWNfdmVyc2lvbmAgKA0KICBgdmVyc2lvbl9udW1gIHZhcmNoYXIoMzIpIE5PVCBOVUxMLA0KICBQUklNQVJZIEtFWSAoYHZlcnNpb25fbnVtYCkNCikgRU5HSU5FPUlubm9EQiBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfMDkwMF9haV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBhcG9sbG9fc2VzamVgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgYXBvbGxvX3Nlc2plYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBhcG9sbG9fc2VzamVgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBpZF9zcHJ6ZXR1YCBpbnQgTk9UIE5VTEwsDQogIGB0eXBfc3Vyb3djYWAgdmFyY2hhcigyNTUpIENPTExBVEUgdXRmOG1iNF91bmljb2RlX2NpIE5PVCBOVUxMLA0KICBgc3RhdHVzX3Nlc2ppYCBlbnVtKCdha3R5d25hJywnemFrb25jem9uYScpIENPTExBVEUgdXRmOG1iNF91bmljb2RlX2NpIE5PVCBOVUxMIERFRkFVTFQgJ2FrdHl3bmEnLA0KICBgY3phc19yb3pwb2N6ZWNpYWAgZGF0ZXRpbWUgTk9UIE5VTEwsDQogIGBjemFzX3pha29uY3plbmlhYCBkYXRldGltZSBERUZBVUxUIE5VTEwsDQogIGByb3pwb2N6ZXRhX3ByemV6YCB2YXJjaGFyKDI1NSkgQ09MTEFURSB1dGY4bWI0X3VuaWNvZGVfY2kgREVGQVVMVCBOVUxMLA0KICBgdXdhZ2lgIHRleHQgQ09MTEFURSB1dGY4bWI0X3VuaWNvZGVfY2ksDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgS0VZIGBpZF9zcHJ6ZXR1YCAoYGlkX3NwcnpldHVgKSwNCiAgQ09OU1RSQUlOVCBgYXBvbGxvX3Nlc2plX2liZmtfMWAgRk9SRUlHTiBLRVkgKGBpZF9zcHJ6ZXR1YCkgUkVGRVJFTkNFUyBgc3ByemV0YCAoYGlkYCkNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD00MiBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfdW5pY29kZV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBhcG9sbG9fdHJhY2tpbmdgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgYXBvbGxvX3RyYWNraW5nYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBhcG9sbG9fdHJhY2tpbmdgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBpZF9zZXNqaWAgaW50IE5PVCBOVUxMLA0KICBgdHlwX3pkYXJ6ZW5pYWAgZW51bSgnRE9EQU5JRV9TVVJPV0NBJywnVFJBTlNGRVJfV1lKU0NJT1dZJywnS09SRUtUQV9SRUNaTkEnKSBDT0xMQVRFIHV0ZjhtYjRfdW5pY29kZV9jaSBOT1QgTlVMTCwNCiAgYHdhZ2Ffa2dgIGRlY2ltYWwoMTAsMikgTk9UIE5VTEwsDQogIGBjemFzX3pkYXJ6ZW5pYWAgZGF0ZXRpbWUgTk9UIE5VTEwsDQogIGBpZF9vcGVyYWNqaV9sb2dgIGludCBERUZBVUxUIE5VTEwsDQogIGBvcGVyYXRvcmAgdmFyY2hhcigyNTUpIENPTExBVEUgdXRmOG1iNF91bmljb2RlX2NpIERFRkFVTFQgTlVMTCwNCiAgYHV3YWdpYCB0ZXh0IENPTExBVEUgdXRmOG1iNF91bmljb2RlX2NpLA0KICBQUklNQVJZIEtFWSAoYGlkYCksDQogIEtFWSBgaWRfc2VzamlgIChgaWRfc2VzamlgKSwNCiAgS0VZIGBpZF9vcGVyYWNqaV9sb2dgIChgaWRfb3BlcmFjamlfbG9nYCksDQogIENPTlNUUkFJTlQgYGFwb2xsb190cmFja2luZ19pYmZrXzFgIEZPUkVJR04gS0VZIChgaWRfc2VzamlgKSBSRUZFUkVOQ0VTIGBhcG9sbG9fc2VzamVgIChgaWRgKSwNCiAgQ09OU1RSQUlOVCBgYXBvbGxvX3RyYWNraW5nX2liZmtfMmAgRk9SRUlHTiBLRVkgKGBpZF9vcGVyYWNqaV9sb2dgKSBSRUZFUkVOQ0VTIGBvcGVyYWNqZV9sb2dgIChgaWRgKQ0KKSBFTkdJTkU9SW5ub0RCIEFVVE9fSU5DUkVNRU5UPTExNCBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfdW5pY29kZV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBhdWRpdF90cmFpbGANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBhdWRpdF90cmFpbGA7DQovKiE0MDEwMSBTRVQgQHNhdmVkX2NzX2NsaWVudCAgICAgPSBAQGNoYXJhY3Rlcl9zZXRfY2xpZW50ICovOw0KLyohNTA1MDMgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gdXRmOG1iNCAqLzsNCkNSRUFURSBUQUJMRSBgYXVkaXRfdHJhaWxgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGB0aW1lc3RhbXBgIGRhdGV0aW1lIE5PVCBOVUxMIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsDQogIGB1c2VyX2lkYCB2YXJjaGFyKDEwMCkgTk9UIE5VTEwsDQogIGBlbnRpdHlfdHlwZWAgdmFyY2hhcig1MCkgTk9UIE5VTEwgQ09NTUVOVCAnTnAuIEJhdGNoZXMsIFRhbmtNaXhlcycsDQogIGBlbnRpdHlfaWRgIGludCBOT1QgTlVMTCwNCiAgYGZpZWxkX25hbWVgIHZhcmNoYXIoNTApIERFRkFVTFQgTlVMTCwNCiAgYG9sZF92YWx1ZWAgdGV4dCwNCiAgYG5ld192YWx1ZWAgdGV4dCwNCiAgYG9wZXJhdGlvbl90eXBlYCB2YXJjaGFyKDUwKSBOT1QgTlVMTCBDT01NRU5UICdOcC4gQ1JFQVRFLCBVUERBVEUsIERFTEVURSwgQ09SUkVDVElPTicsDQogIGByZWFzb25gIHRleHQsDQogIFBSSU1BUlkgS0VZIChgaWRgKQ0KKSBFTkdJTkU9SW5ub0RCIEFVVE9fSU5DUkVNRU5UPTQgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0XzA5MDBfYWlfY2k7DQovKiE0MDEwMSBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSBAc2F2ZWRfY3NfY2xpZW50ICovOw0KDQotLQ0KLS0gVGFibGUgc3RydWN0dXJlIGZvciB0YWJsZSBgYmF0Y2hlc2ANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBiYXRjaGVzYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBiYXRjaGVzYCAoDQogIGBpZGAgaW50IE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBgdW5pcXVlX2NvZGVgIHZhcmNoYXIoNTApIE5PVCBOVUxMLA0KICBgbWF0ZXJpYWxfdHlwZWAgdmFyY2hhcig1MCkgTk9UIE5VTEwsDQogIGBzb3VyY2VfdHlwZWAgZW51bSgnQ1lTJywnQVBPTExPJykgTk9UIE5VTEwsDQogIGBzb3VyY2VfbmFtZWAgdmFyY2hhcig1MCkgTk9UIE5VTEwsDQogIGBpbml0aWFsX3F1YW50aXR5YCBkZWNpbWFsKDEwLDIpIE5PVCBOVUxMLA0KICBgY3VycmVudF9xdWFudGl0eWAgZGVjaW1hbCgxMCwyKSBOT1QgTlVMTCwNCiAgYGNyZWF0aW9uX2RhdGVgIGRhdGV0aW1lIE5PVCBOVUxMIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsDQogIGBzdGF0dXNgIGVudW0oJ0FDVElWRScsJ0RFUExFVEVEJywnQVJDSElWRUQnKSBOT1QgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKGBpZGApLA0KICBVTklRVUUgS0VZIGB1bmlxdWVfY29kZWAgKGB1bmlxdWVfY29kZWApDQopIEVOR0lORT1Jbm5vREIgQVVUT19JTkNSRU1FTlQ9MzcgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0XzA5MDBfYWlfY2k7DQovKiE0MDEwMSBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSBAc2F2ZWRfY3NfY2xpZW50ICovOw0KDQotLQ0KLS0gVGFibGUgc3RydWN0dXJlIGZvciB0YWJsZSBgY2VsZXJ5X2Nyb250YWJfc2NoZWR1bGVgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgY2VsZXJ5X2Nyb250YWJfc2NoZWR1bGVgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYGNlbGVyeV9jcm9udGFiX3NjaGVkdWxlYCAoDQogIGBpZGAgaW50IE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBgbWludXRlYCB2YXJjaGFyKDI0MCkgREVGQVVMVCBOVUxMLA0KICBgaG91cmAgdmFyY2hhcig5NikgREVGQVVMVCBOVUxMLA0KICBgZGF5X29mX3dlZWtgIHZhcmNoYXIoNjQpIERFRkFVTFQgTlVMTCwNCiAgYGRheV9vZl9tb250aGAgdmFyY2hhcigxMjQpIERFRkFVTFQgTlVMTCwNCiAgYG1vbnRoX29mX3llYXJgIHZhcmNoYXIoNjQpIERFRkFVTFQgTlVMTCwNCiAgYHRpbWV6b25lYCB2YXJjaGFyKDY0KSBERUZBVUxUIE5VTEwsDQogIFBSSU1BUlkgS0VZIChgaWRgKQ0KKSBFTkdJTkU9SW5ub0RCIERFRkFVTFQgQ0hBUlNFVD11dGY4bWI0IENPTExBVEU9dXRmOG1iNF8wOTAwX2FpX2NpOw0KLyohNDAxMDEgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gQHNhdmVkX2NzX2NsaWVudCAqLzsNCg0KLS0NCi0tIFRhYmxlIHN0cnVjdHVyZSBmb3IgdGFibGUgYGNlbGVyeV9pbnRlcnZhbF9zY2hlZHVsZWANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBjZWxlcnlfaW50ZXJ2YWxfc2NoZWR1bGVgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYGNlbGVyeV9pbnRlcnZhbF9zY2hlZHVsZWAgKA0KICBgaWRgIGludCBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCwNCiAgYGV2ZXJ5YCBpbnQgTk9UIE5VTEwsDQogIGBwZXJpb2RgIHZhcmNoYXIoMjQpIERFRkFVTFQgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKGBpZGApDQopIEVOR0lORT1Jbm5vREIgQVVUT19JTkNSRU1FTlQ9OSBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfMDkwMF9haV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBjZWxlcnlfcGVyaW9kaWNfdGFza2ANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBjZWxlcnlfcGVyaW9kaWNfdGFza2A7DQovKiE0MDEwMSBTRVQgQHNhdmVkX2NzX2NsaWVudCAgICAgPSBAQGNoYXJhY3Rlcl9zZXRfY2xpZW50ICovOw0KLyohNTA1MDMgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gdXRmOG1iNCAqLzsNCkNSRUFURSBUQUJMRSBgY2VsZXJ5X3BlcmlvZGljX3Rhc2tgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBuYW1lYCB2YXJjaGFyKDI1NSkgREVGQVVMVCBOVUxMLA0KICBgdGFza2AgdmFyY2hhcigyNTUpIERFRkFVTFQgTlVMTCwNCiAgYGludGVydmFsX2lkYCBpbnQgREVGQVVMVCBOVUxMLA0KICBgY3JvbnRhYl9pZGAgaW50IERFRkFVTFQgTlVMTCwNCiAgYHNvbGFyX2lkYCBpbnQgREVGQVVMVCBOVUxMLA0KICBgYXJnc2AgdGV4dCwNCiAgYGt3YXJnc2AgdGV4dCwNCiAgYHF1ZXVlYCB2YXJjaGFyKDI1NSkgREVGQVVMVCBOVUxMLA0KICBgZXhjaGFuZ2VgIHZhcmNoYXIoMjU1KSBERUZBVUxUIE5VTEwsDQogIGByb3V0aW5nX2tleWAgdmFyY2hhcigyNTUpIERFRkFVTFQgTlVMTCwNCiAgYHByaW9yaXR5YCBpbnQgREVGQVVMVCBOVUxMLA0KICBgZXhwaXJlc2AgZGF0ZXRpbWUgREVGQVVMVCBOVUxMLA0KICBgb25lX29mZmAgdGlueWludCgxKSBERUZBVUxUIE5VTEwsDQogIGBzdGFydF90aW1lYCBkYXRldGltZSBERUZBVUxUIE5VTEwsDQogIGBlbmFibGVkYCB0aW55aW50KDEpIERFRkFVTFQgTlVMTCwNCiAgYGxhc3RfcnVuX2F0YCBkYXRldGltZSBERUZBVUxUIE5VTEwsDQogIGB0b3RhbF9ydW5fY291bnRgIGludCBOT1QgTlVMTCwNCiAgYGRhdGVfY2hhbmdlZGAgZGF0ZXRpbWUgREVGQVVMVCBOVUxMLA0KICBgZGVzY3JpcHRpb25gIHRleHQsDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgVU5JUVVFIEtFWSBgbmFtZWAgKGBuYW1lYCkNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD0zIERFRkFVTFQgQ0hBUlNFVD11dGY4bWI0IENPTExBVEU9dXRmOG1iNF8wOTAwX2FpX2NpOw0KLyohNDAxMDEgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gQHNhdmVkX2NzX2NsaWVudCAqLzsNCg0KLS0NCi0tIFRhYmxlIHN0cnVjdHVyZSBmb3IgdGFibGUgYGNlbGVyeV9wZXJpb2RpY190YXNrX2NoYW5nZWRgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgY2VsZXJ5X3BlcmlvZGljX3Rhc2tfY2hhbmdlZGA7DQovKiE0MDEwMSBTRVQgQHNhdmVkX2NzX2NsaWVudCAgICAgPSBAQGNoYXJhY3Rlcl9zZXRfY2xpZW50ICovOw0KLyohNTA1MDMgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gdXRmOG1iNCAqLzsNCkNSRUFURSBUQUJMRSBgY2VsZXJ5X3BlcmlvZGljX3Rhc2tfY2hhbmdlZGAgKA0KICBgaWRgIGludCBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCwNCiAgYGxhc3RfdXBkYXRlYCBkYXRldGltZSBOT1QgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKGBpZGApDQopIEVOR0lORT1Jbm5vREIgQVVUT19JTkNSRU1FTlQ9MiBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfMDkwMF9haV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBjZWxlcnlfc29sYXJfc2NoZWR1bGVgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgY2VsZXJ5X3NvbGFyX3NjaGVkdWxlYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBjZWxlcnlfc29sYXJfc2NoZWR1bGVgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBldmVudGAgdmFyY2hhcigyNCkgREVGQVVMVCBOVUxMLA0KICBgbGF0aXR1ZGVgIGZsb2F0IERFRkFVTFQgTlVMTCwNCiAgYGxvbmdpdHVkZWAgZmxvYXQgREVGQVVMVCBOVUxMLA0KICBQUklNQVJZIEtFWSAoYGlkYCkNCikgRU5HSU5FPUlubm9EQiBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfMDkwMF9haV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBjeWtsZV9maWx0cmFjeWpuZWANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBjeWtsZV9maWx0cmFjeWpuZWA7DQovKiE0MDEwMSBTRVQgQHNhdmVkX2NzX2NsaWVudCAgICAgPSBAQGNoYXJhY3Rlcl9zZXRfY2xpZW50ICovOw0KLyohNTA1MDMgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gdXRmOG1iNCAqLzsNCkNSRUFURSBUQUJMRSBgY3lrbGVfZmlsdHJhY3lqbmVgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBpZF9wYXJ0aWlgIGludCBERUZBVUxUIE5VTEwsDQogIGBudW1lcl9jeWtsdWAgaW50IERFRkFVTFQgTlVMTCwNCiAgYHR5cF9jeWtsdWAgZW51bSgncGxhY2VrJywnZmlsdHJhY2phJywnZG11Y2hhbmllJykgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgTlVMTCwNCiAgYGlkX2ZpbHRyYWAgdmFyY2hhcigxMCkgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgTlVMTCwNCiAgYHJlYWt0b3Jfc3RhcnRvd3lgIHZhcmNoYXIoMTApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGByZWFrdG9yX2RvY2Vsb3d5YCB2YXJjaGFyKDEwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCBOVUxMLA0KICBgY3phc19yb3pwb2N6ZWNpYWAgZGF0ZXRpbWUgREVGQVVMVCBOVUxMLA0KICBgY3phc196YWtvbmN6ZW5pYWAgZGF0ZXRpbWUgREVGQVVMVCBOVUxMLA0KICBgY3phc190cndhbmlhX21pbnV0YCBpbnQgREVGQVVMVCBOVUxMLA0KICBgd3luaWtfb2NlbnlgIGVudW0oJ3Bvenl0eXduYScsJ25lZ2F0eXduYScsJ29jemVrdWplJykgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgTlVMTCwNCiAgYGtvbWVudGFyemAgdGV4dCBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2ksDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgS0VZIGBpZHhfcGFydGlhX2N5a2xgIChgaWRfcGFydGlpYCxgbnVtZXJfY3lrbHVgKSwNCiAgS0VZIGBpZHhfZmlsdHJfY3phc2AgKGBpZF9maWx0cmFgLGBjemFzX3JvenBvY3plY2lhYCksDQogIENPTlNUUkFJTlQgYGN5a2xlX2ZpbHRyYWN5am5lX2liZmtfMWAgRk9SRUlHTiBLRVkgKGBpZF9wYXJ0aWlgKSBSRUZFUkVOQ0VTIGBwYXJ0aWVfc3Vyb3djYWAgKGBpZGApIE9OIERFTEVURSBDQVNDQURFDQopIEVOR0lORT1Jbm5vREIgQVVUT19JTkNSRU1FTlQ9MTkgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2kgQ09NTUVOVD0nSGlzdG9yaWEgd3N6eXN0a2ljaCBjeWtsaSBmaWx0cmFjeWpueWNoIGRsYSBrYcW8ZGVqIHBhcnRpaSc7DQovKiE0MDEwMSBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSBAc2F2ZWRfY3NfY2xpZW50ICovOw0KDQotLQ0KLS0gVGFibGUgc3RydWN0dXJlIGZvciB0YWJsZSBgaGlzdG9yaWFfcG9taWFyb3dgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgaGlzdG9yaWFfcG9taWFyb3dgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYGhpc3RvcmlhX3BvbWlhcm93YCAoDQogIGBpZGAgaW50IE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBgaWRfc3ByemV0dWAgaW50IE5PVCBOVUxMLA0KICBgY3phc19wb21pYXJ1YCBkYXRldGltZSBOT1QgTlVMTCwNCiAgYHRlbXBlcmF0dXJhYCBkZWNpbWFsKDEwLDYpIERFRkFVTFQgTlVMTCwNCiAgYGNpc25pZW5pZWAgZGVjaW1hbCg1LDIpIERFRkFVTFQgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKGBpZGApLA0KICBLRVkgYGlkeF9oaXN0b3JpYV9zcHJ6ZXRfY3phc2AgKGBpZF9zcHJ6ZXR1YCxgY3phc19wb21pYXJ1YCksDQogIENPTlNUUkFJTlQgYGhpc3RvcmlhX3BvbWlhcm93X2liZmtfMWAgRk9SRUlHTiBLRVkgKGBpZF9zcHJ6ZXR1YCkgUkVGRVJFTkNFUyBgc3ByemV0YCAoYGlkYCkNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD01MjU2MSBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfMDkwMF9haV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBsb2dfdXp5dGVfc2VnbWVudHlgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgbG9nX3V6eXRlX3NlZ21lbnR5YDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBsb2dfdXp5dGVfc2VnbWVudHlgICgNCiAgYGlkX29wZXJhY2ppX2xvZ2AgaW50IE5PVCBOVUxMLA0KICBgaWRfc2VnbWVudHVgIGludCBOT1QgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKGBpZF9vcGVyYWNqaV9sb2dgLGBpZF9zZWdtZW50dWApLA0KICBLRVkgYGlkX3NlZ21lbnR1YCAoYGlkX3NlZ21lbnR1YCksDQogIENPTlNUUkFJTlQgYGxvZ191enl0ZV9zZWdtZW50eV9pYmZrXzFgIEZPUkVJR04gS0VZIChgaWRfb3BlcmFjamlfbG9nYCkgUkVGRVJFTkNFUyBgb3BlcmFjamVfbG9nYCAoYGlkYCkgT04gREVMRVRFIENBU0NBREUsDQogIENPTlNUUkFJTlQgYGxvZ191enl0ZV9zZWdtZW50eV9pYmZrXzJgIEZPUkVJR04gS0VZIChgaWRfc2VnbWVudHVgKSBSRUZFUkVOQ0VTIGBzZWdtZW50eWAgKGBpZGApDQopIEVOR0lORT1Jbm5vREIgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2kgQ09NTUVOVD0nWmFwaXN1amUsIGt0w7NyZSBzZWdtZW50eSBiecWCeSB1xbx5d2FuZSB3IGRhbmVqIG9wZXJhY2ppIHogbG9ndSc7DQovKiE0MDEwMSBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSBAc2F2ZWRfY3NfY2xpZW50ICovOw0KDQotLQ0KLS0gVGFibGUgc3RydWN0dXJlIGZvciB0YWJsZSBgbWl4X2NvbXBvbmVudHNgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgbWl4X2NvbXBvbmVudHNgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYG1peF9jb21wb25lbnRzYCAoDQogIGBpZGAgaW50IE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBgbWl4X2lkYCBpbnQgTk9UIE5VTEwsDQogIGBiYXRjaF9pZGAgaW50IE5PVCBOVUxMLA0KICBgZGF0ZV9hZGRlZGAgZGF0ZXRpbWUgTk9UIE5VTEwgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUCwNCiAgYHF1YW50aXR5X2luX21peGAgZGVjaW1hbCgxMCwyKSBOT1QgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKGBpZGApLA0KICBLRVkgYGJhdGNoX2lkYCAoYGJhdGNoX2lkYCksDQogIEtFWSBgbWl4X2lkYCAoYG1peF9pZGApLA0KICBDT05TVFJBSU5UIGBtaXhfY29tcG9uZW50c19pYmZrXzFgIEZPUkVJR04gS0VZIChgYmF0Y2hfaWRgKSBSRUZFUkVOQ0VTIGBiYXRjaGVzYCAoYGlkYCksDQogIENPTlNUUkFJTlQgYG1peF9jb21wb25lbnRzX2liZmtfMmAgRk9SRUlHTiBLRVkgKGBtaXhfaWRgKSBSRUZFUkVOQ0VTIGB0YW5rX21peGVzYCAoYGlkYCkNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD03MyBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfMDkwMF9haV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBvcGVyYWNqZV9sb2dgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgb3BlcmFjamVfbG9nYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBvcGVyYWNqZV9sb2dgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGB0eXBfb3BlcmFjamlgIHZhcmNoYXIoNTApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBOT1QgTlVMTCBDT01NRU5UICdOcC4gVFJBTlNGRVIsIERPREFOSUVfWklFTUksIEZJTFRSQUNKQV9LT8WBTycsDQogIGBpZF9wYXJ0aWlfc3Vyb3djYWAgaW50IERFRkFVTFQgTlVMTCwNCiAgYGlkX3NwcnpldHVfenJvZGxvd2Vnb2AgaW50IERFRkFVTFQgTlVMTCwNCiAgYGlkX3NwcnpldHVfZG9jZWxvd2Vnb2AgaW50IERFRkFVTFQgTlVMTCwNCiAgYGlkX2Fwb2xsb19zZXNqaWAgaW50IERFRkFVTFQgTlVMTCwNCiAgYGN6YXNfcm96cG9jemVjaWFgIGRhdGV0aW1lIE5PVCBOVUxMLA0KICBgY3phc196YWtvbmN6ZW5pYWAgZGF0ZXRpbWUgREVGQVVMVCBOVUxMLA0KICBgb3N0YXRuaWFfbW9keWZpa2FjamFgIGRhdGV0aW1lIERFRkFVTFQgTlVMTCwNCiAgYHptb2R5Zmlrb3dhbmVfcHJ6ZXpgIHZhcmNoYXIoMjU1KSBDT0xMQVRFIHV0ZjhtYjRfdW5pY29kZV9jaSBERUZBVUxUIE5VTEwsDQogIGB1d2FnaWAgdGV4dCBDT0xMQVRFIHV0ZjhtYjRfdW5pY29kZV9jaSwNCiAgYGlsb3NjX2tnYCBkZWNpbWFsKDEwLDIpIERFRkFVTFQgTlVMTCwNCiAgYG9waXNgIHRleHQgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpLA0KICBgc3RhdHVzX29wZXJhY2ppYCBlbnVtKCdha3R5d25hJywnemFrb25jem9uYScsJ3dzdHJ6eW1hbmEnLCdhbnVsb3dhbmEnKSBDT0xMQVRFIHV0ZjhtYjRfdW5pY29kZV9jaSBOT1QgTlVMTCBERUZBVUxUICdha3R5d25hJywNCiAgYHB1bmt0X3N0YXJ0b3d5YCB2YXJjaGFyKDUwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCBOVUxMLA0KICBgcHVua3RfZG9jZWxvd3lgIHZhcmNoYXIoNTApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgS0VZIGBpZF9wYXJ0aWlfc3Vyb3djYWAgKGBpZF9wYXJ0aWlfc3Vyb3djYWApLA0KICBLRVkgYGlkX3NwcnpldHVfenJvZGxvd2Vnb2AgKGBpZF9zcHJ6ZXR1X3pyb2Rsb3dlZ29gKSwNCiAgS0VZIGBpZF9zcHJ6ZXR1X2RvY2Vsb3dlZ29gIChgaWRfc3ByemV0dV9kb2NlbG93ZWdvYCksDQogIEtFWSBgZmtfb3BlcmFjamVfbG9nX2Fwb2xsb19zZXNqZWAgKGBpZF9hcG9sbG9fc2VzamlgKSwNCiAgQ09OU1RSQUlOVCBgZmtfb3BlcmFjamVfbG9nX2Fwb2xsb19zZXNqZWAgRk9SRUlHTiBLRVkgKGBpZF9hcG9sbG9fc2VzamlgKSBSRUZFUkVOQ0VTIGBhcG9sbG9fc2VzamVgIChgaWRgKSwNCiAgQ09OU1RSQUlOVCBgb3BlcmFjamVfbG9nX2liZmtfMWAgRk9SRUlHTiBLRVkgKGBpZF9wYXJ0aWlfc3Vyb3djYWApIFJFRkVSRU5DRVMgYHBhcnRpZV9zdXJvd2NhYCAoYGlkYCkgT04gREVMRVRFIFNFVCBOVUxMLA0KICBDT05TVFJBSU5UIGBvcGVyYWNqZV9sb2dfaWJma18yYCBGT1JFSUdOIEtFWSAoYGlkX3NwcnpldHVfenJvZGxvd2Vnb2ApIFJFRkVSRU5DRVMgYHNwcnpldGAgKGBpZGApIE9OIERFTEVURSBTRVQgTlVMTCwNCiAgQ09OU1RSQUlOVCBgb3BlcmFjamVfbG9nX2liZmtfM2AgRk9SRUlHTiBLRVkgKGBpZF9zcHJ6ZXR1X2RvY2Vsb3dlZ29gKSBSRUZFUkVOQ0VTIGBzcHJ6ZXRgIChgaWRgKSBPTiBERUxFVEUgU0VUIE5VTEwNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD0xOTQgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2kgQ09NTUVOVD0nTG9nIHdzenlzdGtpY2ggemRhcnplxYQgaSBvcGVyYWNqaSB3IHByb2Nlc2llJzsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBvcGVyYXRvcl90ZW1wZXJhdHVyZXNgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgb3BlcmF0b3JfdGVtcGVyYXR1cmVzYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBvcGVyYXRvcl90ZW1wZXJhdHVyZXNgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBpZF9zcHJ6ZXR1YCBpbnQgTk9UIE5VTEwsDQogIGB0ZW1wZXJhdHVyYWAgZGVjaW1hbCgxMCw2KSBOT1QgTlVMTCwNCiAgYGN6YXNfdXN0YXdpZW5pYWAgZGF0ZXRpbWUgTk9UIE5VTEwsDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgS0VZIGBpZF9zcHJ6ZXR1YCAoYGlkX3NwcnpldHVgKSwNCiAgQ09OU1RSQUlOVCBgb3BlcmF0b3JfdGVtcGVyYXR1cmVzX2liZmtfMWAgRk9SRUlHTiBLRVkgKGBpZF9zcHJ6ZXR1YCkgUkVGRVJFTkNFUyBgc3ByemV0YCAoYGlkYCkNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD0xNTQ4IERFRkFVTFQgQ0hBUlNFVD11dGY4bWI0IENPTExBVEU9dXRmOG1iNF91bmljb2RlX2NpOw0KLyohNDAxMDEgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gQHNhdmVkX2NzX2NsaWVudCAqLzsNCg0KLS0NCi0tIFRhYmxlIHN0cnVjdHVyZSBmb3IgdGFibGUgYHBhcnRpZV9oaXN0b3JpYWANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBwYXJ0aWVfaGlzdG9yaWFgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYHBhcnRpZV9oaXN0b3JpYWAgKA0KICBgaWRgIGludCBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCwNCiAgYGlkX3BhcnRpaV9zdXJvd2NhYCBpbnQgTk9UIE5VTEwsDQogIGB0eXBfb3BlcmFjamlgIGVudW0oJ1VUV09SWkVOSUUnLCdUUkFOU0ZFUicsJ0ZJTFRSQUNKQScsJ01JRVNaQU5JRScsJ0RaSUVMRU5JRScsJ1pNSUFOQV9TVEFOVScsJ1BPQk9SX1BST0JLSScsJ1pBVFdJRVJEWkVOSUUnKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwsDQogIGBkYXRhX29wZXJhY2ppYCB0aW1lc3RhbXAgTlVMTCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLA0KICBgb3BlcmF0b3JgIHZhcmNoYXIoMTAwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCBOVUxMLA0KICBgbG9rYWxpemFjamFfcHJ6ZWRgIHZhcmNoYXIoMTAwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCBOVUxMLA0KICBgbG9rYWxpemFjamFfcG9gIHZhcmNoYXIoMTAwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCBOVUxMLA0KICBgd2FnYV9wcnplZGAgZGVjaW1hbCgxMCwzKSBERUZBVUxUIE5VTEwsDQogIGB3YWdhX3BvYCBkZWNpbWFsKDEwLDMpIERFRkFVTFQgTlVMTCwNCiAgYHBhcmFtZXRyeV9vcGVyYWNqaWAganNvbiBERUZBVUxUIE5VTEwsDQogIGBvcGlzX29wZXJhY2ppYCB0ZXh0IENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSwNCiAgYGlkX29wZXJhY2ppX2xvZ2AgaW50IERFRkFVTFQgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKGBpZGApLA0KICBLRVkgYGlkeF9wYXJ0aWFgIChgaWRfcGFydGlpX3N1cm93Y2FgKSwNCiAgS0VZIGBpZHhfdHlwX29wZXJhY2ppYCAoYHR5cF9vcGVyYWNqaWApLA0KICBLRVkgYGlkeF9kYXRhX29wZXJhY2ppYCAoYGRhdGFfb3BlcmFjamlgKSwNCiAgS0VZIGBpZF9vcGVyYWNqaV9sb2dgIChgaWRfb3BlcmFjamlfbG9nYCksDQogIENPTlNUUkFJTlQgYHBhcnRpZV9oaXN0b3JpYV9pYmZrXzFgIEZPUkVJR04gS0VZIChgaWRfcGFydGlpX3N1cm93Y2FgKSBSRUZFUkVOQ0VTIGBwYXJ0aWVfc3Vyb3djYWAgKGBpZGApIE9OIERFTEVURSBDQVNDQURFLA0KICBDT05TVFJBSU5UIGBwYXJ0aWVfaGlzdG9yaWFfaWJma18yYCBGT1JFSUdOIEtFWSAoYGlkX29wZXJhY2ppX2xvZ2ApIFJFRkVSRU5DRVMgYG9wZXJhY2plX2xvZ2AgKGBpZGApIE9OIERFTEVURSBTRVQgTlVMTA0KKSBFTkdJTkU9SW5ub0RCIEFVVE9fSU5DUkVNRU5UPTQgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2k7DQovKiE0MDEwMSBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSBAc2F2ZWRfY3NfY2xpZW50ICovOw0KDQotLQ0KLS0gVGFibGUgc3RydWN0dXJlIGZvciB0YWJsZSBgcGFydGllX3Bvd2lhemFuaWFgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgcGFydGllX3Bvd2lhemFuaWFgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYHBhcnRpZV9wb3dpYXphbmlhYCAoDQogIGBpZGAgaW50IE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBgcGFydGlhX3pyb2Rsb3dhX2lkYCBpbnQgTk9UIE5VTEwsDQogIGBwYXJ0aWFfZG9jZWxvd2FfaWRgIGludCBOT1QgTlVMTCwNCiAgYHR5cF9wb3dpYXphbmlhYCBlbnVtKCdEWklFTEVOSUUnLCdMQUNaRU5JRScsJ1RSQU5TRk9STUFDSkEnKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwsDQogIGBwcm9jZW50X3VkemlhbHVgIGRlY2ltYWwoNSwyKSBERUZBVUxUIE5VTEwsDQogIGBkYXRhX3Bvd2lhemFuaWFgIHRpbWVzdGFtcCBOVUxMIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsDQogIGBpZF9vcGVyYWNqaV9sb2dgIGludCBERUZBVUxUIE5VTEwsDQogIGB1d2FnaWAgdGV4dCBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2ksDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgS0VZIGBpZHhfcGFydGlhX3pyb2Rsb3dhYCAoYHBhcnRpYV96cm9kbG93YV9pZGApLA0KICBLRVkgYGlkeF9wYXJ0aWFfZG9jZWxvd2FgIChgcGFydGlhX2RvY2Vsb3dhX2lkYCksDQogIEtFWSBgaWR4X3R5cF9wb3dpYXphbmlhYCAoYHR5cF9wb3dpYXphbmlhYCksDQogIEtFWSBgaWRfb3BlcmFjamlfbG9nYCAoYGlkX29wZXJhY2ppX2xvZ2ApLA0KICBDT05TVFJBSU5UIGBwYXJ0aWVfcG93aWF6YW5pYV9pYmZrXzFgIEZPUkVJR04gS0VZIChgcGFydGlhX3pyb2Rsb3dhX2lkYCkgUkVGRVJFTkNFUyBgcGFydGllX3N1cm93Y2FgIChgaWRgKSBPTiBERUxFVEUgQ0FTQ0FERSwNCiAgQ09OU1RSQUlOVCBgcGFydGllX3Bvd2lhemFuaWFfaWJma18yYCBGT1JFSUdOIEtFWSAoYHBhcnRpYV9kb2NlbG93YV9pZGApIFJFRkVSRU5DRVMgYHBhcnRpZV9zdXJvd2NhYCAoYGlkYCkgT04gREVMRVRFIENBU0NBREUsDQogIENPTlNUUkFJTlQgYHBhcnRpZV9wb3dpYXphbmlhX2liZmtfM2AgRk9SRUlHTiBLRVkgKGBpZF9vcGVyYWNqaV9sb2dgKSBSRUZFUkVOQ0VTIGBvcGVyYWNqZV9sb2dgIChgaWRgKSBPTiBERUxFVEUgU0VUIE5VTEwNCikgRU5HSU5FPUlubm9EQiBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfdW5pY29kZV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBwYXJ0aWVfcHJvYmtpYA0KLS0NCg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHBhcnRpZV9wcm9ia2lgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYHBhcnRpZV9wcm9ia2lgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBpZF9wYXJ0aWlfc3Vyb3djYWAgaW50IE5PVCBOVUxMLA0KICBgbnVtZXJfcHJvYmtpYCB2YXJjaGFyKDUwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwsDQogIGBkYXRhX3BvYnJhbmlhYCB0aW1lc3RhbXAgTlVMTCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLA0KICBgcG9icmFuYV9wcnplemAgdmFyY2hhcigxMDApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGBsb2thbGl6YWNqYV9wb2JyYW5pYWAgdmFyY2hhcigxMDApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGB0eXBfcHJvYmtpYCBlbnVtKCdSVVRZTk9XQScsJ0tPTlRST0xOQScsJ1JFS0xBTUFDWUpOQScsJ1dBTElEQUNZSk5BJykgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgJ1JVVFlOT1dBJywNCiAgYHN0YXR1c19wcm9ia2lgIGVudW0oJ1BPQlJBTkEnLCdXX0FOQUxJWklFJywnWkFUV0lFUkRaT05BJywnT0RSWlVDT05BJykgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgJ1BPQlJBTkEnLA0KICBgd3luaWtpX2FuYWxpenlgIGpzb24gREVGQVVMVCBOVUxMLA0KICBgZGF0YV9hbmFsaXp5YCB0aW1lc3RhbXAgTlVMTCBERUZBVUxUIE5VTEwsDQogIGBhbmFsaXpvd2FuYV9wcnplemAgdmFyY2hhcigxMDApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGB1d2FnaWAgdGV4dCBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2ksDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgVU5JUVVFIEtFWSBgbnVtZXJfcHJvYmtpYCAoYG51bWVyX3Byb2JraWApLA0KICBLRVkgYGlkeF9wYXJ0aWFgIChgaWRfcGFydGlpX3N1cm93Y2FgKSwNCiAgS0VZIGBpZHhfbnVtZXJfcHJvYmtpYCAoYG51bWVyX3Byb2JraWApLA0KICBLRVkgYGlkeF9zdGF0dXNgIChgc3RhdHVzX3Byb2JraWApLA0KICBLRVkgYGlkeF9kYXRhX3BvYnJhbmlhYCAoYGRhdGFfcG9icmFuaWFgKSwNCiAgQ09OU1RSQUlOVCBgcGFydGllX3Byb2JraV9pYmZrXzFgIEZPUkVJR04gS0VZIChgaWRfcGFydGlpX3N1cm93Y2FgKSBSRUZFUkVOQ0VTIGBwYXJ0aWVfc3Vyb3djYWAgKGBpZGApIE9OIERFTEVURSBDQVNDQURFDQopIEVOR0lORT1Jbm5vREIgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2k7DQovKiE0MDEwMSBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSBAc2F2ZWRfY3NfY2xpZW50ICovOw0KDQotLQ0KLS0gVGFibGUgc3RydWN0dXJlIGZvciB0YWJsZSBgcGFydGllX3NrbGFkbmlraWANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBwYXJ0aWVfc2tsYWRuaWtpYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBwYXJ0aWVfc2tsYWRuaWtpYCAoDQogIGBpZGAgaW50IE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBgaWRfcGFydGlpX3d5bmlrb3dlamAgaW50IE5PVCBOVUxMLA0KICBgaWRfcGFydGlpX3NrbGFkb3dlamAgaW50IE5PVCBOVUxMLA0KICBgd2FnYV9za2xhZG93YV9rZ2AgZGVjaW1hbCgxMCwyKSBOT1QgTlVMTCwNCiAgYGRhdGFfZG9kYW5pYWAgdGltZXN0YW1wIE5VTEwgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUCwNCiAgUFJJTUFSWSBLRVkgKGBpZGApLA0KICBLRVkgYGlkeF9wYXJ0aWFfd3luaWtvd2FgIChgaWRfcGFydGlpX3d5bmlrb3dlamApLA0KICBLRVkgYGlkeF9wYXJ0aWFfc2tsYWRvd2FgIChgaWRfcGFydGlpX3NrbGFkb3dlamApLA0KICBDT05TVFJBSU5UIGBma19wYXJ0aWFfc2tsYWRvd2FgIEZPUkVJR04gS0VZIChgaWRfcGFydGlpX3NrbGFkb3dlamApIFJFRkVSRU5DRVMgYHBhcnRpZV9zdXJvd2NhYCAoYGlkYCkgT04gREVMRVRFIFJFU1RSSUNULA0KICBDT05TVFJBSU5UIGBma19wYXJ0aWFfd3luaWtvd2FgIEZPUkVJR04gS0VZIChgaWRfcGFydGlpX3d5bmlrb3dlamApIFJFRkVSRU5DRVMgYHBhcnRpZV9zdXJvd2NhYCAoYGlkYCkgT04gREVMRVRFIENBU0NBREUNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD01NCBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfdW5pY29kZV9jaSBDT01NRU5UPSdUYWJlbGEgxYLEhWN6xIVjYSBwYXJ0aWUtbWllc3phbmlueSB6IGljaCBza8WCYWRuaWthbWkuJzsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBwYXJ0aWVfc3RhdHVzeWANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBwYXJ0aWVfc3RhdHVzeWA7DQovKiE0MDEwMSBTRVQgQHNhdmVkX2NzX2NsaWVudCAgICAgPSBAQGNoYXJhY3Rlcl9zZXRfY2xpZW50ICovOw0KLyohNTA1MDMgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gdXRmOG1iNCAqLzsNCkNSRUFURSBUQUJMRSBgcGFydGllX3N0YXR1c3lgICgNCiAgYGlkX3BhcnRpaWAgaW50IE5PVCBOVUxMLA0KICBgaWRfc3RhdHVzdWAgaW50IE5PVCBOVUxMLA0KICBgZGF0YV9uYWRhbmlhYCB0aW1lc3RhbXAgTlVMTCBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLA0KICBQUklNQVJZIEtFWSAoYGlkX3BhcnRpaWAsYGlkX3N0YXR1c3VgKSwNCiAgS0VZIGBpZF9zdGF0dXN1YCAoYGlkX3N0YXR1c3VgKSwNCiAgQ09OU1RSQUlOVCBgcGFydGllX3N0YXR1c3lfaWJma18xYCBGT1JFSUdOIEtFWSAoYGlkX3BhcnRpaWApIFJFRkVSRU5DRVMgYHBhcnRpZV9zdXJvd2NhYCAoYGlkYCkgT04gREVMRVRFIENBU0NBREUsDQogIENPTlNUUkFJTlQgYHBhcnRpZV9zdGF0dXN5X2liZmtfMmAgRk9SRUlHTiBLRVkgKGBpZF9zdGF0dXN1YCkgUkVGRVJFTkNFUyBgc3RhdHVzeWAgKGBpZGApIE9OIERFTEVURSBDQVNDQURFDQopIEVOR0lORT1Jbm5vREIgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2kgQ09NTUVOVD0nUHJ6eXBpc3VqZSB3aWVsZSBzdGF0dXPDs3cgZG8gamVkbmVqIHBhcnRpaSc7DQovKiE0MDEwMSBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSBAc2F2ZWRfY3NfY2xpZW50ICovOw0KDQotLQ0KLS0gVGFibGUgc3RydWN0dXJlIGZvciB0YWJsZSBgcGFydGllX3N1cm93Y2FgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgcGFydGllX3N1cm93Y2FgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYHBhcnRpZV9zdXJvd2NhYCAoDQogIGBpZGAgaW50IE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBgdW5pa2Fsbnlfa29kYCB2YXJjaGFyKDUwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwgQ09NTUVOVCAnSWRlbnR5ZmlrYXRvciBwYXJ0aWksIG5wLiBUMTAtMjAyMzEwMjctMTQzMC1BUE9MTE8nLA0KICBgdHlwX3N1cm93Y2FgIHZhcmNoYXIoNTApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGB6cm9kbG9fcG9jaG9kemVuaWFgIGVudW0oJ2Fwb2xsbycsJ2N5c3Rlcm5hJykgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIE5PVCBOVUxMLA0KICBgd2FnYV9wb2N6YXRrb3dhX2tnYCBkZWNpbWFsKDEwLDIpIE5PVCBOVUxMLA0KICBgd2FnYV9ha3R1YWxuYV9rZ2AgZGVjaW1hbCgxMCwyKSBERUZBVUxUIE5VTEwsDQogIGBkYXRhX3V0d29yemVuaWFgIHRpbWVzdGFtcCBOVUxMIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsDQogIGBpZF9zcHJ6ZXR1YCBpbnQgREVGQVVMVCBOVUxMLA0KICBgbmF6d2FfcGFydGlpYCB2YXJjaGFyKDEwMCkgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIE5PVCBOVUxMLA0KICBgcm9kemFqX3N1cm93Y2FgIHZhcmNoYXIoNTApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGBpZF9ha3R1YWxuZWdvX3NwcnpldHVgIGludCBERUZBVUxUIE5VTEwsDQogIGBzdGF0dXNfcGFydGlpYCBlbnVtKCdXIG1hZ2F6eW5pZSBicnVkbnltJywnU3Vyb3d5IHcgcmVha3RvcnplJywnQnVkb3dhbmllIHBsYWNrYScsJ1ByemVsZXdhbmllJywnRmlsdHJvd2FuaWUnLCdPY3pla2l3YW5pZSBuYSBvY2VuxJknLCdEbyBwb25vd25laiBmaWx0cmFjamknLCdEb2JpZWxhbmllJywnR290b3d5IGRvIHd5c8WCYW5pYScsJ1cgbWFnYXp5bmllIGN6eXN0eW0nLCdBcmNoaXdhbG5hJykgQ09MTEFURSB1dGY4bWI0X3VuaWNvZGVfY2kgTk9UIE5VTEwsDQogIGBha3R1YWxueV9ldGFwX3Byb2Nlc3VgIGVudW0oJ3N1cm93eScsJ3BsYWNlaycsJ3ByemVsZXcnLCd3X2tvbGUnLCdvY2VuYV9wcm9ia2knLCdkbXVjaGFuaWUnLCdnb3Rvd3knLCd3eWRtdWNoJykgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgJ3N1cm93eScsDQogIGBudW1lcl9jeWtsdV9ha3R1YWxuZWdvYCBpbnQgREVGQVVMVCAnMCcsDQogIGBjemFzX3JvenBvY3plY2lhX2V0YXB1YCBkYXRldGltZSBERUZBVUxUIE5VTEwsDQogIGBwbGFub3dhbnlfY3phc196YWtvbmN6ZW5pYWAgZGF0ZXRpbWUgREVGQVVMVCBOVUxMLA0KICBgaWRfYWt0dWFsbmVnb19maWx0cmFgIHZhcmNoYXIoMTApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGByZWFrdG9yX2RvY2Vsb3d5YCB2YXJjaGFyKDEwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCBOVUxMLA0KICBgaWxvc2NfY3lrbGlfZmlsdHJhY3lqbnljaGAgaW50IERFRkFVTFQgJzAnLA0KICBgaGlzdG9yaWFfb3BlcmFjamlgIGpzb24gREVGQVVMVCBOVUxMLA0KICBgdHlwX3RyYW5zZm9ybWFjamlgIGVudW0oJ05PV0EnLCdUUkFOU0ZFUicsJ0ZJTFRSQUNKQScsJ01JRVNaQU5JRScsJ0RaSUVMRU5JRScpIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUICdOT1dBJywNCiAgYGV0YXBfcHJvY2VzdWAgZW51bSgnU1VST1dBJywnV19QUk9DRVNJRScsJ0ZJTFRST1dBTkEnLCdHT1RPV0EnLCdaQVRXSUVSRFpPTkEnLCdPRFJaVUNPTkEnKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCAnU1VST1dBJywNCiAgYHBvY2hvZHplbmllX29waXNgIHRleHQgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpLA0KICBgZGF0YV9vc3RhdG5pZWpfbW9keWZpa2FjamlgIHRpbWVzdGFtcCBOVUxMIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAgT04gVVBEQVRFIENVUlJFTlRfVElNRVNUQU1QLA0KICBgdXR3b3J6b25hX3ByemV6YCB2YXJjaGFyKDEwMCkgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgTlVMTCwNCiAgYGNlcnR5ZmlrYXRfamFrb3NjaWAgdGV4dCBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2ksDQogIGB1d2FnaV9vcGVyYXRvcmFgIHRleHQgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpLA0KICBQUklNQVJZIEtFWSAoYGlkYCksDQogIFVOSVFVRSBLRVkgYHVuaWthbG55X2tvZGAgKGB1bmlrYWxueV9rb2RgKSwNCiAgVU5JUVVFIEtFWSBgbmF6d2FfcGFydGlpYCAoYG5hendhX3BhcnRpaWApLA0KICBLRVkgYGlkX3NwcnpldHVgIChgaWRfc3ByemV0dWApLA0KICBLRVkgYGlkeF90eXBfdHJhbnNmb3JtYWNqaWAgKGB0eXBfdHJhbnNmb3JtYWNqaWApLA0KICBLRVkgYGlkeF9ldGFwX3Byb2Nlc3VgIChgZXRhcF9wcm9jZXN1YCksDQogIENPTlNUUkFJTlQgYHBhcnRpZV9zdXJvd2NhX2liZmtfMWAgRk9SRUlHTiBLRVkgKGBpZF9zcHJ6ZXR1YCkgUkVGRVJFTkNFUyBgc3ByemV0YCAoYGlkYCkgT04gREVMRVRFIFNFVCBOVUxMDQopIEVOR0lORT1Jbm5vREIgQVVUT19JTkNSRU1FTlQ9OTggREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2kgQ09NTUVOVD0nS2HFvGR5IHdpZXJzeiB0byB1bmlrYWxuYSBwYXJ0aWEgcHJvZHVrY3lqbmEgc3Vyb3djYSc7DQovKiE0MDEwMSBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSBAc2F2ZWRfY3NfY2xpZW50ICovOw0KDQotLQ0KLS0gVGFibGUgc3RydWN0dXJlIGZvciB0YWJsZSBgcGF0aGZpbmRlcl90ZXN0X2hpc3RvcnlgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgcGF0aGZpbmRlcl90ZXN0X2hpc3RvcnlgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYHBhdGhmaW5kZXJfdGVzdF9oaXN0b3J5YCAoDQogIGBpZGAgaW50IE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBgdGVzdF90eXBlYCB2YXJjaGFyKDUwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwsDQogIGBzdGFydF9wb2ludGAgdmFyY2hhcigxMDApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGBlbmRfcG9pbnRgIHZhcmNoYXIoMTAwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCBOVUxMLA0KICBgdGVzdF9wYXJhbWV0ZXJzYCBqc29uIERFRkFVTFQgTlVMTCwNCiAgYHJlc3VsdGAganNvbiBERUZBVUxUIE5VTEwsDQogIGBzdWNjZXNzYCB0aW55aW50KDEpIERFRkFVTFQgTlVMTCwNCiAgYGV4ZWN1dGlvbl90aW1lX21zYCBpbnQgREVGQVVMVCBOVUxMLA0KICBgY3JlYXRlZF9hdGAgZGF0ZXRpbWUgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUCwNCiAgUFJJTUFSWSBLRVkgKGBpZGApDQopIEVOR0lORT1Jbm5vREIgQVVUT19JTkNSRU1FTlQ9MTAwIERFRkFVTFQgQ0hBUlNFVD11dGY4bWI0IENPTExBVEU9dXRmOG1iNF91bmljb2RlX2NpOw0KLyohNDAxMDEgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gQHNhdmVkX2NzX2NsaWVudCAqLzsNCg0KLS0NCi0tIFRhYmxlIHN0cnVjdHVyZSBmb3IgdGFibGUgYHBvcnR5X3NwcnpldHVgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgcG9ydHlfc3ByemV0dWA7DQovKiE0MDEwMSBTRVQgQHNhdmVkX2NzX2NsaWVudCAgICAgPSBAQGNoYXJhY3Rlcl9zZXRfY2xpZW50ICovOw0KLyohNTA1MDMgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gdXRmOG1iNCAqLzsNCkNSRUFURSBUQUJMRSBgcG9ydHlfc3ByemV0dWAgKA0KICBgaWRgIGludCBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCwNCiAgYGlkX3NwcnpldHVgIGludCBOT1QgTlVMTCwNCiAgYG5hendhX3BvcnR1YCB2YXJjaGFyKDUwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwsDQogIGB0eXBfcG9ydHVgIGVudW0oJ0lOJywnT1VUJykgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIE5PVCBOVUxMLA0KICBQUklNQVJZIEtFWSAoYGlkYCksDQogIFVOSVFVRSBLRVkgYG5hendhX3BvcnR1YCAoYG5hendhX3BvcnR1YCksDQogIEtFWSBgaWRfc3ByemV0dWAgKGBpZF9zcHJ6ZXR1YCksDQogIENPTlNUUkFJTlQgYHBvcnR5X3NwcnpldHVfaWJma18xYCBGT1JFSUdOIEtFWSAoYGlkX3NwcnpldHVgKSBSRUZFUkVOQ0VTIGBzcHJ6ZXRgIChgaWRgKSBPTiBERUxFVEUgQ0FTQ0FERQ0KKSBFTkdJTkU9SW5ub0RCIEFVVE9fSU5DUkVNRU5UPTEyNiBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfdW5pY29kZV9jaSBDT01NRU5UPSdQdW5rdHkgd2VqxZtjaW93ZS93eWrFm2Npb3dlIG5hIHNwcnrEmWNpZSAocmVha3RvcmFjaCwgZmlsdHJhY2gpJzsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBwcm9ia2lfb2NlbmFgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgcHJvYmtpX29jZW5hYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBwcm9ia2lfb2NlbmFgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBpZF9wYXJ0aWlgIGludCBOT1QgTlVMTCwNCiAgYGlkX2N5a2x1X2ZpbHRyYWN5am5lZ29gIGludCBOT1QgTlVMTCwNCiAgYGN6YXNfcG9icmFuaWFgIGRhdGV0aW1lIE5PVCBOVUxMLA0KICBgY3phc19vY2VueWAgZGF0ZXRpbWUgREVGQVVMVCBOVUxMLA0KICBgd3luaWtfb2NlbnlgIGVudW0oJ3Bvenl0eXduYScsJ25lZ2F0eXduYScsJ29jemVrdWplJykgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgJ29jemVrdWplJywNCiAgYG9jZW5hX2tvbG9ydWAgdmFyY2hhcig1MCkgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIERFRkFVTFQgTlVMTCwNCiAgYGRlY3l6amFgIGVudW0oJ2tvbnR5bnV1al9maWx0cmFjamUnLCd3eXNsaWpfZG9fbWFnYXp5bnUnLCdkb2Rhal96aWVtaWUnKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCBOVUxMLA0KICBgb3BlcmF0b3Jfb2NlbmlhamFjeWAgdmFyY2hhcigxMDApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGB1d2FnaWAgdGV4dCBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2ksDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgS0VZIGBpZF9jeWtsdV9maWx0cmFjeWpuZWdvYCAoYGlkX2N5a2x1X2ZpbHRyYWN5am5lZ29gKSwNCiAgS0VZIGBpZHhfcGFydGlhX2N6YXNgIChgaWRfcGFydGlpYCxgY3phc19wb2JyYW5pYWApLA0KICBDT05TVFJBSU5UIGBwcm9ia2lfb2NlbmFfaWJma18xYCBGT1JFSUdOIEtFWSAoYGlkX3BhcnRpaWApIFJFRkVSRU5DRVMgYHBhcnRpZV9zdXJvd2NhYCAoYGlkYCkgT04gREVMRVRFIENBU0NBREUsDQogIENPTlNUUkFJTlQgYHByb2JraV9vY2VuYV9pYmZrXzJgIEZPUkVJR04gS0VZIChgaWRfY3lrbHVfZmlsdHJhY3lqbmVnb2ApIFJFRkVSRU5DRVMgYGN5a2xlX2ZpbHRyYWN5am5lYCAoYGlkYCkgT04gREVMRVRFIENBU0NBREUNCikgRU5HSU5FPUlubm9EQiBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfdW5pY29kZV9jaSBDT01NRU5UPSdSZWplc3RyIHByw7NiZWsgaSBpY2ggb2NlbiBwb2RjemFzIHByb2Nlc3UgZmlsdHJhY2ppJzsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBzZWdtZW50eWANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGBzZWdtZW50eWA7DQovKiE0MDEwMSBTRVQgQHNhdmVkX2NzX2NsaWVudCAgICAgPSBAQGNoYXJhY3Rlcl9zZXRfY2xpZW50ICovOw0KLyohNTA1MDMgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gdXRmOG1iNCAqLzsNCkNSRUFURSBUQUJMRSBgc2VnbWVudHlgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBuYXp3YV9zZWdtZW50dWAgdmFyY2hhcigxMDApIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBOT1QgTlVMTCwNCiAgYGlkX3BvcnR1X3N0YXJ0b3dlZ29gIGludCBERUZBVUxUIE5VTEwsDQogIGBpZF93ZXpsYV9zdGFydG93ZWdvYCBpbnQgREVGQVVMVCBOVUxMLA0KICBgaWRfcG9ydHVfa29uY293ZWdvYCBpbnQgREVGQVVMVCBOVUxMLA0KICBgaWRfd2V6bGFfa29uY293ZWdvYCBpbnQgREVGQVVMVCBOVUxMLA0KICBgaWRfemF3b3J1YCBpbnQgTk9UIE5VTEwsDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgVU5JUVVFIEtFWSBgbmF6d2Ffc2VnbWVudHVgIChgbmF6d2Ffc2VnbWVudHVgKSwNCiAgS0VZIGBpZF9wb3J0dV9zdGFydG93ZWdvYCAoYGlkX3BvcnR1X3N0YXJ0b3dlZ29gKSwNCiAgS0VZIGBpZF93ZXpsYV9zdGFydG93ZWdvYCAoYGlkX3dlemxhX3N0YXJ0b3dlZ29gKSwNCiAgS0VZIGBpZF9wb3J0dV9rb25jb3dlZ29gIChgaWRfcG9ydHVfa29uY293ZWdvYCksDQogIEtFWSBgaWRfd2V6bGFfa29uY293ZWdvYCAoYGlkX3dlemxhX2tvbmNvd2Vnb2ApLA0KICBLRVkgYGlkX3phd29ydWAgKGBpZF96YXdvcnVgKSwNCiAgQ09OU1RSQUlOVCBgc2VnbWVudHlfaWJma18xYCBGT1JFSUdOIEtFWSAoYGlkX3BvcnR1X3N0YXJ0b3dlZ29gKSBSRUZFUkVOQ0VTIGBwb3J0eV9zcHJ6ZXR1YCAoYGlkYCksDQogIENPTlNUUkFJTlQgYHNlZ21lbnR5X2liZmtfMmAgRk9SRUlHTiBLRVkgKGBpZF93ZXpsYV9zdGFydG93ZWdvYCkgUkVGRVJFTkNFUyBgd2V6bHlfcnVyb2NpYWd1YCAoYGlkYCksDQogIENPTlNUUkFJTlQgYHNlZ21lbnR5X2liZmtfM2AgRk9SRUlHTiBLRVkgKGBpZF9wb3J0dV9rb25jb3dlZ29gKSBSRUZFUkVOQ0VTIGBwb3J0eV9zcHJ6ZXR1YCAoYGlkYCksDQogIENPTlNUUkFJTlQgYHNlZ21lbnR5X2liZmtfNGAgRk9SRUlHTiBLRVkgKGBpZF93ZXpsYV9rb25jb3dlZ29gKSBSRUZFUkVOQ0VTIGB3ZXpseV9ydXJvY2lhZ3VgIChgaWRgKSwNCiAgQ09OU1RSQUlOVCBgc2VnbWVudHlfaWJma181YCBGT1JFSUdOIEtFWSAoYGlkX3phd29ydWApIFJFRkVSRU5DRVMgYHphd29yeWAgKGBpZGApDQopIEVOR0lORT1Jbm5vREIgQVVUT19JTkNSRU1FTlQ9MjQxIERFRkFVTFQgQ0hBUlNFVD11dGY4bWI0IENPTExBVEU9dXRmOG1iNF91bmljb2RlX2NpIENPTU1FTlQ9J0RlZmluaXVqZSBmaXp5Y3puZSBwb8WCxIVjemVuaWEgKGtyYXfEmWR6aWUgZ3JhZnUpJzsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBzcHJ6ZXRgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgc3ByemV0YDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBzcHJ6ZXRgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBuYXp3YV91bmlrYWxuYWAgdmFyY2hhcigyMCkgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIE5PVCBOVUxMIENPTU1FTlQgJ05wLiBSMSwgRlosIEIxYiwgQjdjJywNCiAgYHR5cF9zcHJ6ZXR1YCBlbnVtKCdyZWFrdG9yJywnZmlsdHInLCdiZWN6a2FfYnJ1ZG5hJywnYmVjemthX2N6eXN0YScsJ2Fwb2xsbycsJ21hZ2F6eW4nLCdjeXN0ZXJuYScsJ21hdXplcicpIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIGBwb2plbW5vc2Nfa2dgIGRlY2ltYWwoMTAsMikgREVGQVVMVCBOVUxMLA0KICBgc3Rhbl9zcHJ6ZXR1YCB2YXJjaGFyKDUwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgREVGQVVMVCBOVUxMIENPTU1FTlQgJ05wLiBQdXN0eSwgVyBrb8WCbywgUHJ6ZWxldywgRG11Y2hhbmllIGZpbHRyYScsDQogIGB0ZW1wZXJhdHVyYV9ha3R1YWxuYWAgZGVjaW1hbCgxMCw2KSBERUZBVUxUIE5VTEwsDQogIGBjaXNuaWVuaWVfYWt0dWFsbmVgIGRlY2ltYWwoNSwyKSBERUZBVUxUIE5VTEwsDQogIGBwb3ppb21fYWt0dWFsbnlfcHJvY2VudGAgZGVjaW1hbCg1LDIpIERFRkFVTFQgTlVMTCwNCiAgYG9zdGF0bmlhX2FrdHVhbGl6YWNqYWAgZGF0ZXRpbWUgREVGQVVMVCBOVUxMLA0KICBgdGVtcGVyYXR1cmFfbWF4YCBkZWNpbWFsKDEwLDYpIERFRkFVTFQgJzEyMC4wMDAwMDAnLA0KICBgY2lzbmllbmllX21heGAgZGVjaW1hbCg1LDIpIERFRkFVTFQgJzYuMDAnLA0KICBgaWRfcGFydGlpX3N1cm93Y2FgIGludCBERUZBVUxUIE5VTEwsDQogIGB0ZW1wZXJhdHVyYV9kb2NlbG93YWAgZGVjaW1hbCgxMCw2KSBERUZBVUxUIE5VTEwgQ09NTUVOVCAnVGVtcGVyYXR1cmEgemFkYW5hIHByemV6IG9wZXJhdG9yYScsDQogIGBzenlia29zY190b3BuaWVuaWFfa2dfaGAgZGVjaW1hbCgxMCwyKSBERUZBVUxUICcxMDAwLjAwJyBDT01NRU5UICdTemFjb3dhbmEgc3p5YmtvxZvEhyB0b3BuaWVuaWEgc3Vyb3djYSB3IGtnIG5hIGdvZHppbsSZJywNCiAgYHV3YWdpX3Nlcndpc293ZWAgdGV4dCBDT0xMQVRFIHV0ZjhtYjRfdW5pY29kZV9jaSwNCiAgYGFjdGl2ZV9taXhfaWRgIGludCBERUZBVUxUIE5VTEwsDQogIGBzenlia29zY19ncnphbmlhX2NfbmFfbWludXRlYCBkZWNpbWFsKDEwLDYpIERFRkFVTFQgTlVMTCBDT01NRU5UICdTemFjb3dhbmEgc3p5YmtvxZvEhyBncnphbmlhIHcgwrBDL21pbicsDQogIGBzenlia29zY19jaGxvZHplbmlhX2NfbmFfbWludXRlYCBkZWNpbWFsKDEwLDYpIERFRkFVTFQgTlVMTCBDT01NRU5UICdTemFjb3dhbmEgc3p5YmtvxZvEhyBjaMWCb2R6ZW5pYSB3IMKwQy9taW4nLA0KICBgc3Rhbl9wYWxuaWthYCBlbnVtKCdXTEFDWk9OWScsJ1dZTEFDWk9OWScpIENPTExBVEUgdXRmOG1iNF91bmljb2RlX2NpIERFRkFVTFQgTlVMTCBDT01NRU5UICdBa3R1YWxueSBzdGFuIHBhbG5pa2EgcmVha3RvcmEnLA0KICBgZmlsdGVyX2Nha2Vfc3RhdHVzYCB2YXJjaGFyKDUwKSBDT0xMQVRFIHV0ZjhtYjRfdW5pY29kZV9jaSBERUZBVUxUIE5VTEwgQ09NTUVOVCAnU3RhdHVzIHBsYWNrYSBuYSBmaWx0cnplIChucC4gQ1pZU1RZLCBUMTBfR09UT1dZKScsDQogIGBmaWx0ZXJfY2FrZV9vcmlnaW5fbWl4X2lkYCBpbnQgREVGQVVMVCBOVUxMIENPTU1FTlQgJ0lEIG1pZXN6YW5pbnkgKFRhbmtNaXgpLCB6IGt0w7NyZWogcG9jaG9kemkgb2JlY255IHBsYWNlaycsDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgVU5JUVVFIEtFWSBgbmF6d2FfdW5pa2FsbmFgIChgbmF6d2FfdW5pa2FsbmFgKSwNCiAgS0VZIGBpeF9zcHJ6ZXRfYWN0aXZlX21peF9pZGAgKGBhY3RpdmVfbWl4X2lkYCkNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD0xMTggREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2kgQ09NTUVOVD0nTGlzdGEgY2HFgmVnbyBzcHJ6xJl0dSBwcm9kdWtjeWpuZWdvIGkgbWFnYXp5bm93ZWdvJzsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGBzdGF0dXN5YA0KLS0NCg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHN0YXR1c3lgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYHN0YXR1c3lgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBuYXp3YV9zdGF0dXN1YCB2YXJjaGFyKDUwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwgQ09NTUVOVCAnTnAuIFN1cm93eSwgRmlsdHJvd2FueSwgRG9iaWVsb255LCBXeWRtdWNoJywNCiAgUFJJTUFSWSBLRVkgKGBpZGApLA0KICBVTklRVUUgS0VZIGBuYXp3YV9zdGF0dXN1YCAoYG5hendhX3N0YXR1c3VgKQ0KKSBFTkdJTkU9SW5ub0RCIEFVVE9fSU5DUkVNRU5UPTggREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2kgQ09NTUVOVD0nU8WCb3duaWsgbW/FvGxpd3ljaCBzdGF0dXPDs3cgcGFydGlpIHN1cm93Y2EnOw0KLyohNDAxMDEgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gQHNhdmVkX2NzX2NsaWVudCAqLzsNCg0KLS0NCi0tIFRhYmxlIHN0cnVjdHVyZSBmb3IgdGFibGUgYHN0YXR1c3lfcGFydGlpYA0KLS0NCg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHN0YXR1c3lfcGFydGlpYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGBzdGF0dXN5X3BhcnRpaWAgKA0KICBgaWRgIGludCBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCwNCiAgYG5hendhX3N0YXR1c3VgIHZhcmNoYXIoNTApIE5PVCBOVUxMLA0KICBgb3Bpc2AgdGV4dCwNCiAgUFJJTUFSWSBLRVkgKGBpZGApLA0KICBVTklRVUUgS0VZIGBuYXp3YV9zdGF0dXN1YCAoYG5hendhX3N0YXR1c3VgKQ0KKSBFTkdJTkU9SW5ub0RCIERFRkFVTFQgQ0hBUlNFVD11dGY4bWI0IENPTExBVEU9dXRmOG1iNF8wOTAwX2FpX2NpOw0KLyohNDAxMDEgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gQHNhdmVkX2NzX2NsaWVudCAqLzsNCg0KLS0NCi0tIFRhYmxlIHN0cnVjdHVyZSBmb3IgdGFibGUgYHRhbmtfbWl4ZXNgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGFua19taXhlc2A7DQovKiE0MDEwMSBTRVQgQHNhdmVkX2NzX2NsaWVudCAgICAgPSBAQGNoYXJhY3Rlcl9zZXRfY2xpZW50ICovOw0KLyohNTA1MDMgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gdXRmOG1iNCAqLzsNCkNSRUFURSBUQUJMRSBgdGFua19taXhlc2AgKA0KICBgaWRgIGludCBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCwNCiAgYHVuaXF1ZV9jb2RlYCB2YXJjaGFyKDUwKSBOT1QgTlVMTCwNCiAgYHRhbmtfaWRgIGludCBOT1QgTlVMTCwNCiAgYGNyZWF0aW9uX2RhdGVgIGRhdGV0aW1lIE5PVCBOVUxMIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsDQogIGBzdGF0dXNgIGVudW0oJ0FDVElWRScsJ0FSQ0hJVkVEJykgTk9UIE5VTEwsDQogIGBwcm9jZXNzX3N0YXR1c2AgdmFyY2hhcig1MCkgTk9UIE5VTEwgQ09NTUVOVCAnSmF3bnkgc3RhdHVzIGV0YXB1IHByemV0d2FyemFuaWEgbWllc3phbmlueScsDQogIGBtYWluX2NvbXBvc2l0aW9uYCBqc29uIERFRkFVTFQgTlVMTCBDT01NRU5UICdTxYJvd25payBnxYLDs3dueWNoIHNrxYJhZG5pa8OzdyB6IHByb2NlbnRhbWksIG5wLiB7IlQxMCI6IDk5LjB9JywNCiAgYHd5ZG11Y2hfcGVyY2VudGFnZWAgZGVjaW1hbCg1LDIpIE5PVCBOVUxMLA0KICBgZmlsdGVyX3JlbWFpbnNfcGVyY2VudGFnZWAgZGVjaW1hbCg1LDIpIE5PVCBOVUxMLA0KICBgZmlsdHJhdGlvbl9jeWNsZXNfY291bnRgIGludCBOT1QgTlVMTCwNCiAgYHd5ZG11Y2hfY3ljbGVzX2NvdW50YCBpbnQgTk9UIE5VTEwsDQogIGBibGVhY2hpbmdfZWFydGhfYmFnc190b3RhbGAgaW50IE5PVCBOVUxMLA0KICBgd2hpdGVib2FyZF9pZGAgdmFyY2hhcigxMCkgREVGQVVMVCBOVUxMIENPTU1FTlQgJ0lkZW50eWZpa2F0b3IgeiB3aGl0ZWJvYXJkdSwgbnAuIChBKSwgKEIpJywNCiAgYGlzX3d5ZG11Y2hfbWl4YCB0aW55aW50KDEpIE5PVCBOVUxMIENPTU1FTlQgJ096bmFjemEsIGN6eSB0YSBtaWVzemFuaW5hIHNrxYJhZGEgc2nEmSB3ecWCxIVjem5pZSB6IHd5ZG11Y2jDs3cuJywNCiAgUFJJTUFSWSBLRVkgKGBpZGApLA0KICBVTklRVUUgS0VZIGB1bmlxdWVfY29kZWAgKGB1bmlxdWVfY29kZWApLA0KICBLRVkgYHRhbmtfaWRgIChgdGFua19pZGApLA0KICBDT05TVFJBSU5UIGB0YW5rX21peGVzX2liZmtfMWAgRk9SRUlHTiBLRVkgKGB0YW5rX2lkYCkgUkVGRVJFTkNFUyBgc3ByemV0YCAoYGlkYCkNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD0xOCBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfMDkwMF9haV9jaTsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGB0eXB5X3N1cm93Y2FgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdHlweV9zdXJvd2NhYDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGB0eXB5X3N1cm93Y2FgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBuYXp3YWAgdmFyY2hhcig1MCkgQ0hBUkFDVEVSIFNFVCB1dGY4bWI0IENPTExBVEUgdXRmOG1iNF8wOTAwX2FpX2NpIE5PVCBOVUxMLA0KICBgb3Bpc2AgdmFyY2hhcigyNTUpIENIQVJBQ1RFUiBTRVQgdXRmOG1iNCBDT0xMQVRFIHV0ZjhtYjRfMDkwMF9haV9jaSBERUZBVUxUIE5VTEwsDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgVU5JUVVFIEtFWSBgbmF6d2FgIChgbmF6d2FgKQ0KKSBFTkdJTkU9SW5ub0RCIEFVVE9fSU5DUkVNRU5UPTYgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2kgQ09NTUVOVD0nU8WCb3duaWsgdHlww7N3IHN1cm93Y2EnOw0KLyohNDAxMDEgU0VUIGNoYXJhY3Rlcl9zZXRfY2xpZW50ID0gQHNhdmVkX2NzX2NsaWVudCAqLzsNCg0KLS0NCi0tIFRhYmxlIHN0cnVjdHVyZSBmb3IgdGFibGUgYHdlemx5X3J1cm9jaWFndWANCi0tDQoNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB3ZXpseV9ydXJvY2lhZ3VgOw0KLyohNDAxMDEgU0VUIEBzYXZlZF9jc19jbGllbnQgICAgID0gQEBjaGFyYWN0ZXJfc2V0X2NsaWVudCAqLzsNCi8qITUwNTAzIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IHV0ZjhtYjQgKi87DQpDUkVBVEUgVEFCTEUgYHdlemx5X3J1cm9jaWFndWAgKA0KICBgaWRgIGludCBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCwNCiAgYG5hendhX3dlemxhYCB2YXJjaGFyKDUwKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwsDQogIFBSSU1BUlkgS0VZIChgaWRgKSwNCiAgVU5JUVVFIEtFWSBgbmF6d2Ffd2V6bGFgIChgbmF6d2Ffd2V6bGFgKQ0KKSBFTkdJTkU9SW5ub0RCIEFVVE9fSU5DUkVNRU5UPTEzOCBERUZBVUxUIENIQVJTRVQ9dXRmOG1iNCBDT0xMQVRFPXV0ZjhtYjRfdW5pY29kZV9jaSBDT01NRU5UPSdQdW5rdHkgxYLEhWN6ZW5pb3dlIHcgcnVyb2NpxIVndSAodHLDs2puaWtpLCBrb2xla3RvcnkpJzsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQoNCi0tDQotLSBUYWJsZSBzdHJ1Y3R1cmUgZm9yIHRhYmxlIGB6YXdvcnlgDQotLQ0KDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgemF3b3J5YDsNCi8qITQwMTAxIFNFVCBAc2F2ZWRfY3NfY2xpZW50ICAgICA9IEBAY2hhcmFjdGVyX3NldF9jbGllbnQgKi87DQovKiE1MDUwMyBTRVQgY2hhcmFjdGVyX3NldF9jbGllbnQgPSB1dGY4bWI0ICovOw0KQ1JFQVRFIFRBQkxFIGB6YXdvcnlgICgNCiAgYGlkYCBpbnQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGBuYXp3YV96YXdvcnVgIHZhcmNoYXIoODApIENPTExBVEUgdXRmOG1iNF91bmljb2RlX2NpIERFRkFVTFQgTlVMTCwNCiAgYHN0YW5gIGVudW0oJ09UV0FSVFknLCdaQU1LTklFVFknKSBDSEFSQUNURVIgU0VUIHV0ZjhtYjQgQ09MTEFURSB1dGY4bWI0XzA5MDBfYWlfY2kgTk9UIE5VTEwgREVGQVVMVCAnWkFNS05JRVRZJywNCiAgUFJJTUFSWSBLRVkgKGBpZGApLA0KICBVTklRVUUgS0VZIGBuYXp3YV96YXdvcnVgIChgbmF6d2FfemF3b3J1YCkNCikgRU5HSU5FPUlubm9EQiBBVVRPX0lOQ1JFTUVOVD0yMDUgREVGQVVMVCBDSEFSU0VUPXV0ZjhtYjQgQ09MTEFURT11dGY4bWI0X3VuaWNvZGVfY2kgQ09NTUVOVD0nTGlzdGEgemF3b3LDs3cgc3RlcnVqxIVjeWNoIHByemVwxYJ5d2VtJzsNCi8qITQwMTAxIFNFVCBjaGFyYWN0ZXJfc2V0X2NsaWVudCA9IEBzYXZlZF9jc19jbGllbnQgKi87DQovKiE0MDEwMyBTRVQgVElNRV9aT05FPUBPTERfVElNRV9aT05FICovOw0KDQovKiE0MDEwMSBTRVQgU1FMX01PREU9QE9MRF9TUUxfTU9ERSAqLzsNCi8qITQwMDE0IFNFVCBGT1JFSUdOX0tFWV9DSEVDS1M9QE9MRF9GT1JFSUdOX0tFWV9DSEVDS1MgKi87DQovKiE0MDAxNCBTRVQgVU5JUVVFX0NIRUNLUz1AT0xEX1VOSVFVRV9DSEVDS1MgKi87DQovKiE0MDEwMSBTRVQgQ0hBUkFDVEVSX1NFVF9DTElFTlQ9QE9MRF9DSEFSQUNURVJfU0VUX0NMSUVOVCAqLzsNCi8qITQwMTAxIFNFVCBDSEFSQUNURVJfU0VUX1JFU1VMVFM9QE9MRF9DSEFSQUNURVJfU0VUX1JFU1VMVFMgKi87DQovKiE0MDEwMSBTRVQgQ09MTEFUSU9OX0NPTk5FQ1RJT049QE9MRF9DT0xMQVRJT05fQ09OTkVDVElPTiAqLzsNCi8qITQwMTExIFNFVCBTUUxfTk9URVM9QE9MRF9TUUxfTk9URVMgKi87DQoNCi0tIER1bXAgY29tcGxldGVkIG9uIDIwMjUtMDktMTIgMTk6NTY6NTcNCg==
  - path: celery_app.py
    content: IyBjZWxlcnlfYXBwLnB5DQpmcm9tIGFwcCBpbXBvcnQgY3JlYXRlX2FwcA0KZnJvbSBjZWxlcnkgaW1wb3J0IENlbGVyeQ0KaW1wb3J0IG9zDQppbXBvcnQgc3lzDQpzeXMucGF0aC5pbnNlcnQoMCwgb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXyksICdsb2NhbF9saWJzJykpDQoNCnByaW50KGYiLS0tIFtERUJVR10gRG9kYW5vIGRvIHN5cy5wYXRoOiB7b3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXyksICdsb2NhbF9saWJzJyl9IikNCnByaW50KGYiLS0tIFtDRUxFUllfQVBQIERFQlVHXSBTWVMuUEFUSCBuYSBzdGFyY2llOiB7c3lzLnBhdGhbMF19IikNCg0KIyBVc3RhbCBhZHJlcyBVUkwgYnJva2VyYSBSZWRpcyBuYSBwb2RzdGF3aWUgem1pZW5ueWNoIMWbcm9kb3dpc2tvd3ljaA0KUkVESVNfVVJMID0gb3MuZW52aXJvbi5nZXQoJ1JFRElTX1VSTCcsICdyZWRpczovL2xvY2FsaG9zdDo2Mzc5LzAnKQ0KaWYgIlJFRElTX1VSTCIgbm90IGluIG9zLmVudmlyb246DQogICAgdHJ5Og0KICAgICAgICBpbXBvcnQgc29ja2V0DQogICAgICAgIHNvY2tldC5nZXRob3N0YnluYW1lKCdyZWRpcycpDQogICAgICAgIFJFRElTX1VSTCA9ICdyZWRpczovL3JlZGlzOjYzNzkvMCcNCiAgICBleGNlcHQgc29ja2V0LmVycm9yOg0KICAgICAgICBwYXNzDQoNCiMgVXR3w7NyeiBpbnN0YW5jasSZIGFwbGlrYWNqaSBGbGFzaywgYWJ5IG1pZcSHIGRvc3TEmXAgZG8gamVqIGtvbmZpZ3VyYWNqaQ0KcHJpbnQoIi0tLSBbQ0VMRVJZX0FQUCBERUJVR10gUHJ6ZWQgd3l3b8WCYW5pZW0gY3JlYXRlX2FwcCgpLi4uIikNCmZsYXNrX2FwcCA9IGNyZWF0ZV9hcHAoKQ0KcHJpbnQoIi0tLSBbQ0VMRVJZX0FQUCBERUJVR10gUG8gd3l3b8WCYW5pdSBjcmVhdGVfYXBwKCkuIEFwbGlrYWNqYSBzdHdvcnpvbmEuIikNCg0KZGVmIG1ha2VfY2VsZXJ5KGFwcCk6DQogICAgIiIiDQogICAgVHdvcnp5IGkga29uZmlndXJ1amUgaW5zdGFuY2rEmSBDZWxlcnksIMWCxIVjesSFYyBqxIUgeiBhcGxpa2FjasSFIEZsYXNrLg0KICAgICIiIg0KICAgIGNlbGVyeSA9IENlbGVyeSgNCiAgICAgICAgYXBwLmltcG9ydF9uYW1lLA0KICAgICAgICBiYWNrZW5kPVJFRElTX1VSTCwNCiAgICAgICAgYnJva2VyPVJFRElTX1VSTA0KICAgICkNCiAgICBwcmludChmIi0tLSBbQ0VMRVJZX0FQUCBERUJVR10gS29uZmlndXJhY2phIHogRmxhc2thIChhcHAuY29uZmlnKToge2FwcC5jb25maWcuZ2V0KCdDRUxFUllfQkVBVF9EQlVSSScpfSIpDQogICAgY2VsZXJ5LmNvbmZpZ19mcm9tX29iamVjdCgnYXBwLmNvbmZpZy5Db25maWcnKQ0KDQogICAgIyBTcHJhd2TFum15LCBjbyBDZWxlcnkgbWEgcG8gemHFgmFkb3dhbml1IGtvbmZpZ3VyYWNqaQ0KICAgIHByaW50KGYiLS0tIFtDRUxFUllfQVBQIERFQlVHXSBLb25maWd1cmFjamEgdyBDZWxlcnkgKHBvIGNvbmZpZ19mcm9tX29iamVjdCk6IHtjZWxlcnkuY29uZi5nZXQoJ2JlYXRfc2NoZWR1bGVyX2RidXJpJyl9IikNCg0KICAgIGJlYXRfZGJfdXJpID0gYXBwLmNvbmZpZy5nZXQoJ0NFTEVSWV9CRUFUX0RCVVJJJykNCiAgICBwcmludChmIi0tLSBbQ0VMRVJZX0FQUCBERUJVR10gSmF3bmUgdXN0YXdpYW5pZSAnYmVhdF9kYnVyaScgbmE6IHtiZWF0X2RiX3VyaX0iKQ0KICAgIGNlbGVyeS5jb25mLnVwZGF0ZSh7DQogICAgICAgICdiZWF0X2RidXJpJzogYmVhdF9kYl91cmkNCiAgICB9KQ0KDQogICAgY2xhc3MgQ29udGV4dFRhc2soY2VsZXJ5LlRhc2spOg0KICAgICAgICBkZWYgX19jYWxsX18oc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgICAgIHdpdGggYXBwLmFwcF9jb250ZXh0KCk6DQogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYucnVuKCphcmdzLCAqKmt3YXJncykNCiAgICANCiAgICBjZWxlcnkuVGFzayA9IENvbnRleHRUYXNrDQogICAgcmV0dXJuIGNlbGVyeQ0KDQpjZWxlcnkgPSBtYWtlX2NlbGVyeShmbGFza19hcHApDQoNCiMgSmF3bmUgemFpbXBvcnRvd2FuaWUgbW9kdcWCdSB6IHphZGFuaWFtaQ0KY2VsZXJ5LmF1dG9kaXNjb3Zlcl90YXNrcyhbJ2FwcC50YXNrcyddKQ0KDQojIC0tLSBVU1VOScSYVEEgU0VLQ0pBIC0tLQ0KIyBDYcWCYSBsb2dpa2EgendpxIV6YW5hIHogU0VOU09SU19JTlRFUlZBTCwgQUxBUk1TX0VOQUJMRUQNCiMgaSBidWRvd2FuaWVtIHPFgm93bmlrYSBgYmVhdF9zY2hlZHVsZWAgem9zdGHFgmEgdXN1bmnEmXRhLg0KIyBUZXJheiBoYXJtb25vZ3JhbSBixJlkemllIHcgY2HFgm/Fm2NpIHcgYmF6aWUgZGFueWNoLg0KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ==
  - path: manage.py
    content: 
  - path: migrate.ps1
    content: IyBtaWdyYXRlLnBzMQ0KIyBXZXJzamEgZmluYWxuYSwgdcW8eXdhasSFY2Egem1pZW5ueWNoIMWbcm9kb3dpc2tvd3ljaCBpIHphd2llcmFqxIVjYSBrb21lbmTEmSBzdGFtcC10ZXN0Lg0KDQpwYXJhbSAoDQogICAgW1BhcmFtZXRlcihNYW5kYXRvcnk9JHRydWUsIFBvc2l0aW9uPTApXQ0KICAgIFtWYWxpZGF0ZVNldCgiZ2VuZXJhdGUiLCAidXBncmFkZSIsICJkb3duZ3JhZGUiLCAiaGlzdG9yeSIsICJjdXJyZW50IiwgInN0YW1wLXRlc3QiKV0NCiAgICBbc3RyaW5nXSRDb21tYW5kLA0KDQogICAgW1BhcmFtZXRlcihQb3NpdGlvbj0xKV0NCiAgICBbc3RyaW5nXSRNZXNzYWdlDQopDQoNCmZ1bmN0aW9uIENoZWNrLUxhc3QtU3VjY2VzcyB7DQogICAgaWYgKCRMQVNURVhJVENPREUgLW5lIDApIHsNCiAgICAgICAgV3JpdGUtT3V0cHV0ICIhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIg0KICAgICAgICBXcml0ZS1PdXRwdXQgIiEhISBCTEFEOiBQb3ByemVkbmlhIGtvbWVuZGEgemFrb25jenlsYSBzaWUgbmllcG93b2R6ZW5pZW0uIFByemVyd2FuaWUgc2tyeXB0dS4iDQogICAgICAgIFdyaXRlLU91dHB1dCAiISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISINCiAgICAgICAgIyBQcnp5d3LDs8SHIHptaWVubsSFIMWbcm9kb3dpc2tvd8SFIG5hIHdzemVsa2kgd3lwYWRlaw0KICAgICAgICAkZW52OkFMRU1CSUNfVEVTVF9NT0RFID0gJG51bGwNCiAgICAgICAgZXhpdCAxDQogICAgfQ0KfQ0KDQppZiAoJENvbW1hbmQgLWVxICJnZW5lcmF0ZSIpIHsNCiAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJE1lc3NhZ2UpKSB7DQogICAgICAgIFdyaXRlLU91dHB1dCAiQkxBRDogS29tZW5kYSAnZ2VuZXJhdGUnIHd5bWFnYSBwb2RhbmlhIGtvbXVuaWthdHUgbWlncmFjamkuIg0KICAgICAgICBXcml0ZS1PdXRwdXQgIlByenlrbGFkOiAuXG1pZ3JhdGUucHMxIGdlbmVyYXRlICdEb2RhbmllIG5vd2VqIHRhYmVsaSB1enl0a293bmlrb3cnIg0KICAgICAgICBleGl0IDENCiAgICB9DQogICAgV3JpdGUtT3V0cHV0ICItLS0gR2VuZXJvd2FuaWUgbm93ZWogbWlncmFjamkuLi4gLS0tIg0KICAgIGFsZW1iaWMgcmV2aXNpb24gLS1hdXRvZ2VuZXJhdGUgLW0gIiRNZXNzYWdlIg0KDQp9IGVsc2VpZiAoJENvbW1hbmQgLWVxICJ1cGdyYWRlIikgew0KICAgIFdyaXRlLU91dHB1dCAiLS0tIEFrdHVhbGl6YWNqYSBiYXp5IERFV0VMT1BFUlNLSUVKIGRvIG5ham5vd3N6ZWogd2Vyc2ppLi4uIC0tLSINCiAgICBhbGVtYmljIHVwZ3JhZGUgaGVhZA0KICAgIENoZWNrLUxhc3QtU3VjY2Vzcw0KDQogICAgV3JpdGUtT3V0cHV0ICIiDQogICAgV3JpdGUtT3V0cHV0ICItLS0gQWt0dWFsaXphY2phIGJhenkgVEVTVE9XRUogZG8gbmFqbm93c3plaiB3ZXJzamkuLi4gLS0tIg0KICAgIHRyeSB7DQogICAgICAgICRlbnY6QUxFTUJJQ19URVNUX01PREUgPSAidHJ1ZSINCiAgICAgICAgYWxlbWJpYyB1cGdyYWRlIGhlYWQNCiAgICB9IGZpbmFsbHkgew0KICAgICAgICAkZW52OkFMRU1CSUNfVEVTVF9NT0RFID0gJG51bGwNCiAgICB9DQogICAgQ2hlY2stTGFzdC1TdWNjZXNzDQoNCn0gZWxzZWlmICgkQ29tbWFuZCAtZXEgImRvd25ncmFkZSIpIHsNCiAgICBXcml0ZS1PdXRwdXQgIi0tLSBXeWNvZmFuaWUgb3N0YXRuaWVqIG1pZ3JhY2ppIHogYmF6eSBERVdFTE9QRVJTS0lFSi4uLiAtLS0iDQogICAgYWxlbWJpYyBkb3duZ3JhZGUgLTENCiAgICBDaGVjay1MYXN0LVN1Y2Nlc3MNCg0KICAgIFdyaXRlLU91dHB1dCAiIg0KICAgIFdyaXRlLU91dHB1dCAiLS0tIFd5Y29mYW5pZSBvc3RhdG5pZWogbWlncmFjamkgeiBiYXp5IFRFU1RPV0VKLi4uIC0tLSINCiAgICB0cnkgew0KICAgICAgICAkZW52OkFMRU1CSUNfVEVTVF9NT0RFID0gInRydWUiDQogICAgICAgIGFsZW1iaWMgZG93bmdyYWRlIC0xDQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgJGVudjpBTEVNQklDX1RFU1RfTU9ERSA9ICRudWxsDQogICAgfQ0KICAgIENoZWNrLUxhc3QtU3VjY2Vzcw0KDQp9IGVsc2VpZiAoJENvbW1hbmQgLWVxICJoaXN0b3J5Iikgew0KICAgIFdyaXRlLU91dHB1dCAiLS0tIEhpc3RvcmlhIG1pZ3JhY2ppLi4uIC0tLSINCiAgICBhbGVtYmljIGhpc3RvcnkNCg0KfSBlbHNlaWYgKCRDb21tYW5kIC1lcSAiY3VycmVudCIpIHsNCiAgICBXcml0ZS1PdXRwdXQgIi0tLSBBa3R1YWxuYSB3ZXJzamEgYmF6eSBkZXdlbG9wZXJza2llai4uLiAtLS0iDQogICAgYWxlbWJpYyBjdXJyZW50DQogICAgDQogICAgV3JpdGUtT3V0cHV0ICIiDQogICAgV3JpdGUtT3V0cHV0ICItLS0gQWt0dWFsbmEgd2Vyc2phIGJhenkgdGVzdG93ZWouLi4gLS0tIg0KICAgIHRyeSB7DQogICAgICAgICRlbnY6QUxFTUJJQ19URVNUX01PREUgPSAidHJ1ZSINCiAgICAgICAgYWxlbWJpYyBjdXJyZW50DQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgJGVudjpBTEVNQklDX1RFU1RfTU9ERSA9ICRudWxsDQogICAgfQ0KfSBlbHNlaWYgKCRDb21tYW5kIC1lcSAic3RhbXAtdGVzdCIpIHsNCiAgICBXcml0ZS1PdXRwdXQgIi0tLSBTdGVtcGxvd2FuaWUgYmF6eSBURVNUT1dFSiBkbyBuYWpub3dzemVqIHdlcnNqaSAoaGVhZCkuLi4gLS0tIg0KICAgIHRyeSB7DQogICAgICAgICRlbnY6QUxFTUJJQ19URVNUX01PREUgPSAidHJ1ZSINCiAgICAgICAgYWxlbWJpYyBzdGFtcCBoZWFkDQogICAgfSBmaW5hbGx5IHsNCiAgICAgICAgJGVudjpBTEVNQklDX1RFU1RfTU9ERSA9ICRudWxsDQogICAgfQ0KICAgIENoZWNrLUxhc3QtU3VjY2Vzcw0KfQ0KDQoNCldyaXRlLU91dHB1dCAiIg0KV3JpdGUtT3V0cHV0ICItLS0gU2tyeXB0IHpha29uY3p5bCBkemlhbGFuaWUgLS0tIg==
  - path: requirements.txt
    content: Iw0KIyBUaGlzIGZpbGUgaXMgYXV0b2dlbmVyYXRlZCBieSBwaXAtY29tcGlsZSB3aXRoIFB5dGhvbiAzLjExDQojIGJ5IHRoZSBmb2xsb3dpbmcgY29tbWFuZDoNCiMNCiMgICAgcGlwLWNvbXBpbGUNCiMNCmFsZW1iaWM9PTEuMTMuMQ0KICAgICMgdmlhIC1yIHJlcXVpcmVtZW50cy5pbg0KYW1xcD09NS4zLjENCiAgICAjIHZpYSBrb21idQ0KYXBzY2hlZHVsZXI9PTMuMTEuMA0KICAgICMgdmlhIGZsYXNrLWFwc2NoZWR1bGVyDQpiaWRpY3Q9PTAuMjMuMQ0KICAgICMgdmlhIHB5dGhvbi1zb2NrZXRpbw0KYmlsbGlhcmQ9PTQuMi4xDQogICAgIyB2aWEgY2VsZXJ5DQpibGlua2VyPT0xLjkuMA0KICAgICMgdmlhIGZsYXNrDQpjZWxlcnk9PTUuNS4zDQogICAgIyB2aWENCiAgICAjICAgLXIgcmVxdWlyZW1lbnRzLmluDQogICAgIyAgIGZsb3dlcg0KY2xpY2s9PTguMi4xDQogICAgIyB2aWENCiAgICAjICAgY2VsZXJ5DQogICAgIyAgIGNsaWNrLWRpZHlvdW1lYW4NCiAgICAjICAgY2xpY2stcGx1Z2lucw0KICAgICMgICBjbGljay1yZXBsDQogICAgIyAgIGZsYXNrDQpjbGljay1kaWR5b3VtZWFuPT0wLjMuMQ0KICAgICMgdmlhIGNlbGVyeQ0KY2xpY2stcGx1Z2lucz09MS4xLjEuMg0KICAgICMgdmlhIGNlbGVyeQ0KY2xpY2stcmVwbD09MC4zLjANCiAgICAjIHZpYSBjZWxlcnkNCmNvbG9yYW1hPT0wLjQuNg0KICAgICMgdmlhDQogICAgIyAgIGNsaWNrDQogICAgIyAgIHB5dGVzdA0KZG5zcHl0aG9uPT0yLjcuMA0KICAgICMgdmlhIGV2ZW50bGV0DQpldmVudGxldD09MC40MC4yDQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpmbGFzaz09My4xLjENCiAgICAjIHZpYQ0KICAgICMgICAtciByZXF1aXJlbWVudHMuaW4NCiAgICAjICAgZmxhc2stYWRtaW4NCiAgICAjICAgZmxhc2stYXBzY2hlZHVsZXINCiAgICAjICAgZmxhc2stY29ycw0KICAgICMgICBmbGFzay1zb2NrZXRpbw0KICAgICMgICBmbGFzay1zcWxhbGNoZW15DQpmbGFzay1hZG1pbj09MS42LjENCiAgICAjIHZpYSAtciByZXF1aXJlbWVudHMuaW4NCmZsYXNrLWFwc2NoZWR1bGVyPT0xLjEyLjMNCiAgICAjIHZpYSAtciByZXF1aXJlbWVudHMuaW4NCmZsYXNrLWNvcnM9PTYuMC4xDQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpmbGFzay1zb2NrZXRpbz09NS41LjENCiAgICAjIHZpYSAtciByZXF1aXJlbWVudHMuaW4NCmZsYXNrLXNxbGFsY2hlbXk9PTMuMS4xDQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpmbG93ZXI9PTIuMC4xDQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpncmVlbmxldD09My4yLjMNCiAgICAjIHZpYQ0KICAgICMgICBldmVudGxldA0KICAgICMgICBzcWxhbGNoZW15DQpndW5pY29ybj09MjMuMC4wDQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpoMTE9PTAuMTYuMA0KICAgICMgdmlhIHdzcHJvdG8NCmh1bWFuaXplPT00LjEzLjANCiAgICAjIHZpYSBmbG93ZXINCmluaWNvbmZpZz09Mi4xLjANCiAgICAjIHZpYSBweXRlc3QNCml0c2Rhbmdlcm91cz09Mi4yLjANCiAgICAjIHZpYSBmbGFzaw0KamluamEyPT0zLjEuNg0KICAgICMgdmlhIGZsYXNrDQprb21idT09NS41LjQNCiAgICAjIHZpYSBjZWxlcnkNCm1ha289PTEuMy4xMA0KICAgICMgdmlhIGFsZW1iaWMNCm1hcmt1cHNhZmU9PTMuMC4yDQogICAgIyB2aWENCiAgICAjICAgZmxhc2sNCiAgICAjICAgamluamEyDQogICAgIyAgIG1ha28NCiAgICAjICAgd2Vya3pldWcNCiAgICAjICAgd3Rmb3Jtcw0KbWVtb3J5LXByb2ZpbGVyPT0wLjYxLjANCiAgICAjIHZpYSAtciByZXF1aXJlbWVudHMuaW4NCm15c3FsLWNvbm5lY3Rvci1weXRob249PTkuMy4wDQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpuZXR3b3JreD09My41DQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpwYWNrYWdpbmc9PTI1LjANCiAgICAjIHZpYQ0KICAgICMgICBndW5pY29ybg0KICAgICMgICBrb21idQ0KICAgICMgICBweXRlc3QNCnBsdWdneT09MS42LjANCiAgICAjIHZpYSBweXRlc3QNCnByb21ldGhldXMtY2xpZW50PT0wLjIyLjENCiAgICAjIHZpYSBmbG93ZXINCnByb21wdC10b29sa2l0PT0zLjAuNTINCiAgICAjIHZpYSBjbGljay1yZXBsDQpwc3V0aWw9PTcuMC4wDQogICAgIyB2aWEgbWVtb3J5LXByb2ZpbGVyDQpweWdtZW50cz09Mi4xOS4yDQogICAgIyB2aWEgcHl0ZXN0DQpweXRlc3Q9PTguNC4xDQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpweXRob24tZGF0ZXV0aWw9PTIuOS4wLnBvc3QwDQogICAgIyB2aWENCiAgICAjICAgY2VsZXJ5DQogICAgIyAgIGZsYXNrLWFwc2NoZWR1bGVyDQpweXRob24tZG90ZW52PT0xLjEuMQ0KICAgICMgdmlhIC1yIHJlcXVpcmVtZW50cy5pbg0KcHl0aG9uLWVuZ2luZWlvPT00LjEyLjINCiAgICAjIHZpYSBweXRob24tc29ja2V0aW8NCnB5dGhvbi1zb2NrZXRpbz09NS4xMy4wDQogICAgIyB2aWEgZmxhc2stc29ja2V0aW8NCnB5dHo9PTIwMjUuMg0KICAgICMgdmlhDQogICAgIyAgIC1yIHJlcXVpcmVtZW50cy5pbg0KICAgICMgICBmbG93ZXINCnB5d2luMzI9PTMxMCA7IHN5c19wbGF0Zm9ybSA9PSAid2luMzIiDQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpweXlhbWw9PTYuMC4yDQogICAgIyB2aWEgLXIgcmVxdWlyZW1lbnRzLmluDQpyZWRpcz09Ni40LjANCiAgICAjIHZpYSAtciByZXF1aXJlbWVudHMuaW4NCnNpbXBsZS13ZWJzb2NrZXQ9PTEuMS4wDQogICAgIyB2aWEgcHl0aG9uLWVuZ2luZWlvDQpzaXg9PTEuMTcuMA0KICAgICMgdmlhIHB5dGhvbi1kYXRldXRpbA0Kc3FsYWxjaGVteT09Mi4wLjI3DQogICAgIyB2aWENCiAgICAjICAgYWxlbWJpYw0KICAgICMgICBmbGFzay1zcWxhbGNoZW15DQp0YWJ1bGF0ZT09MC45LjANCiAgICAjIHZpYSAtciByZXF1aXJlbWVudHMuaW4NCnRvcm5hZG89PTYuNS4yDQogICAgIyB2aWEgZmxvd2VyDQp0eXBpbmctZXh0ZW5zaW9ucz09NC4xNC4xDQogICAgIyB2aWENCiAgICAjICAgYWxlbWJpYw0KICAgICMgICBzcWxhbGNoZW15DQp0emRhdGE9PTIwMjUuMg0KICAgICMgdmlhDQogICAgIyAgIGtvbWJ1DQogICAgIyAgIHR6bG9jYWwNCnR6bG9jYWw9PTUuMy4xDQogICAgIyB2aWEgYXBzY2hlZHVsZXINCnZpbmU9PTUuMS4wDQogICAgIyB2aWENCiAgICAjICAgYW1xcA0KICAgICMgICBjZWxlcnkNCiAgICAjICAga29tYnUNCndjd2lkdGg9PTAuMi4xMw0KICAgICMgdmlhIHByb21wdC10b29sa2l0DQp3ZXJremV1Zz09My4xLjMNCiAgICAjIHZpYQ0KICAgICMgICBmbGFzaw0KICAgICMgICBmbGFzay1jb3JzDQp3c3Byb3RvPT0xLjIuMA0KICAgICMgdmlhIHNpbXBsZS13ZWJzb2NrZXQNCnd0Zm9ybXM9PTMuMi4xDQogICAgIyB2aWEgZmxhc2stYWRtaW4NCg==
  - path: run.py
    content: IyBydW4ucHkNCmltcG9ydCBldmVudGxldA0KZXZlbnRsZXQubW9ua2V5X3BhdGNoKCkNCg0KZnJvbSBhcHAgaW1wb3J0IGNyZWF0ZV9hcHAsIHNvY2tldGlvDQoNCmFwcCA9IGNyZWF0ZV9hcHAoKQ0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgICNhcHAucnVuKCBkZWJ1Zz1UcnVlLCBwb3J0PTUwMDAsIGhvc3Q9JzAuMC4wLjAnICkNCiAgICBzb2NrZXRpby5ydW4oYXBwLCBkZWJ1Zz1UcnVlLCBwb3J0PTUwMDAsIGhvc3Q9JzAuMC4wLjAnKQ0K
